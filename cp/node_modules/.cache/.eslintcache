[{"/home/mayakuntla/Videos/cp/src/index.js":"1","/home/mayakuntla/Videos/cp/src/reportWebVitals.js":"2","/home/mayakuntla/Videos/cp/src/App.js":"3","/home/mayakuntla/Videos/cp/src/Components/App_context.js":"4","/home/mayakuntla/Videos/cp/src/Components/Pages/Home.js":"5","/home/mayakuntla/Videos/cp/src/Components/Pages/Coverage_home.js":"6","/home/mayakuntla/Videos/cp/src/Components/Datasets/Dataset.js":"7","/home/mayakuntla/Videos/cp/src/Components/Navbar/Mainnavbar.js":"8","/home/mayakuntla/Videos/cp/src/Components/Pages/Scp_home.js":"9","/home/mayakuntla/Videos/cp/src/Components/Navbar/Scpnavbar.js":"10","/home/mayakuntla/Videos/cp/src/Components/Guidelines/Guidelines.js":"11","/home/mayakuntla/Videos/cp/src/Components/Tutorial/Terms_used.js":"12","/home/mayakuntla/Videos/cp/src/Components/Form/Form.js":"13","/home/mayakuntla/Videos/cp/src/Components/Files/Files.js":"14","/home/mayakuntla/Videos/cp/src/Components/Contact/Contact.js":"15","/home/mayakuntla/Videos/cp/src/history.js":"16","/home/mayakuntla/Videos/cp/src/Components/Navbar/SidebarData.js":"17","/home/mayakuntla/Videos/cp/src/Components/Navbar/SubMenu.js":"18","/home/mayakuntla/Videos/cp/src/Components/Navbar/Cp_Data.js":"19","/home/mayakuntla/Videos/cp/src/Components/Navbar/Mainsidebardata.js":"20","/home/mayakuntla/Videos/cp/src/Components/Defs/mincs.js":"21"},{"size":457,"mtime":1627359499941,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":1626029607038,"results":"24","hashOfConfig":"23"},{"size":2068,"mtime":1632220559512,"results":"25","hashOfConfig":"23"},{"size":99,"mtime":1626504558080,"results":"26","hashOfConfig":"23"},{"size":143,"mtime":1629628781892,"results":"27","hashOfConfig":"23"},{"size":170,"mtime":1629631374304,"results":"28","hashOfConfig":"23"},{"size":2001,"mtime":1631201158156,"results":"29","hashOfConfig":"23"},{"size":3260,"mtime":1629624993484,"results":"30","hashOfConfig":"23"},{"size":21967,"mtime":1632228711484,"results":"31","hashOfConfig":"23"},{"size":8334,"mtime":1632224573648,"results":"32","hashOfConfig":"23"},{"size":433,"mtime":1627391783197,"results":"33","hashOfConfig":"23"},{"size":28492,"mtime":1632200057020,"results":"34","hashOfConfig":"23"},{"size":51323,"mtime":1632237997640,"results":"35","hashOfConfig":"23"},{"size":906,"mtime":1627021196916,"results":"36","hashOfConfig":"23"},{"size":4606,"mtime":1632205639708,"results":"37","hashOfConfig":"23"},{"size":84,"mtime":1626271737327,"results":"38","hashOfConfig":"23"},{"size":2102,"mtime":1629909915908,"results":"39","hashOfConfig":"23"},{"size":4251,"mtime":1632227265092,"results":"40","hashOfConfig":"23"},{"size":1475,"mtime":1629626603544,"results":"41","hashOfConfig":"23"},{"size":2883,"mtime":1632224697016,"results":"42","hashOfConfig":"23"},{"size":136,"mtime":1632076826643,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"c05w1f",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":94,"fixableErrorCount":0,"fixableWarningCount":6,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"46"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"/home/mayakuntla/Videos/cp/src/index.js",[],["100","101"],"/home/mayakuntla/Videos/cp/src/reportWebVitals.js",[],"/home/mayakuntla/Videos/cp/src/App.js",["102"],"import React, { useState } from 'react';\nimport './App.css';\nimport Scpnavbar from './Components/Navbar/Scpnavbar';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './Components/Pages/Home';\nimport Dataset from './Components/Datasets/Dataset';\nimport Terms_used from './Components/Tutorial/Terms_used';\nimport AppContext from './Components/App_context';\nimport Form from './Components/Form/Form';\nimport Guidelines from './Components/Guidelines/Guidelines';\nimport Files from './Components/Files/Files';\nimport Contact from './Components/Contact/Contact';\nimport Mainnavbar from './Components/Navbar/Mainnavbar';\nimport Scp_home from './Components/Pages/Scp_home';\nimport Coverage_home from './Components/Pages/Coverage_home';\nimport Mincs from './Components/Defs/mincs';\nfunction App({history}) {\n  const [sidebar,setSidebar]=useState(true);\n  const [dataset_name,setdatasetname]=useState(\"\");\n  const show=()=>{\n    setSidebar(!sidebar);\n  }\n  const dataset_set=(data)=>{\n    setdatasetname(data);\n  }\n  console.log(\"datasetname\");\n  console.log(dataset_name);\n  \n \n  const user_settings={\n    side:sidebar,\n    dataset:dataset_name,\n    \n   \n    show,\n    dataset_set,\n    setdatasetname,\n   \n\n  }\n  \n  return (\n    <div className=\"app\">\n      <AppContext.Provider value={user_settings}>\n      <Router>\n        <Scpnavbar />\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/terms_used' component={Terms_used}/>\n          <Route path='/guidelines' component={Guidelines}/>\n          <Route path='/datasets' component={Dataset} />\n          <Route path='/form' component={Form} />\n          <Route path='/files' component={Files}/>\n          <Route path='/contact' component={Contact}/>\n          <Route path='/scp_patterns_home' component={Scp_home}/>\n          <Route path='/mincs' component={Mincs}/>\n          <Route path='/coverage_patterns_home' component={Coverage_home}/>\n        </Switch>\n      </Router>\n    </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;","/home/mayakuntla/Videos/cp/src/Components/App_context.js",[],"/home/mayakuntla/Videos/cp/src/Components/Pages/Home.js",[],"/home/mayakuntla/Videos/cp/src/Components/Pages/Coverage_home.js",[],"/home/mayakuntla/Videos/cp/src/Components/Datasets/Dataset.js",["103","104","105"],"import React, { useState,useContext } from 'react';\nimport './Dataset.css';\nimport axios from 'axios';\nimport AppContext from '../App_context';\nimport Image from '../../Images/Graph_example.png';\n\nconst Dataset=()=>{\n    const myContext = useContext(AppContext);\n    return(\n        <div className={myContext.side  ? \"total_div\": \"total_div_1\"}>\n            <div className=\"display_flex\">\n            <div className=\"datasetandmodelling\">\n                <h5 className=\"heading_datamodelling\">Dataset Format and Modelling</h5>\n                <p className=\"ins_description\">1. Dataset File Extension ---- '.txt'.</p>\n                <p className=\"ins_description\">2. Everyline in the file starts with a letter 't' or 'v' or 'e'.</p>\n                <p className=\"ins_description\">3. Line starting with a letter 't' denotes a 'transaction'.</p>\n                <p className='ins_description'>4. A transaction is of the form 't # x' where 'x' is transaction id (usually starts from zero).</p>\n                <p className='ins_description'>5. Line starting with a letter 'v' denotes a vertex.</p>\n                <p className='ins_description'>6. A vertex is of the form 'v x y' where 'x' is vertex number and 'y' is vertex label.</p>\n                <p className='ins_description'>7. Line starting with a letter 'e' denotes an edge.</p>\n                <p className='ins_description'>8. An edge is of the form 'e x y z' where 'x' is vertex id and 'y' is a vertex id and 'z' is the edge label.</p>\n                <p className='ins_description'>9. Ensure that for every transaction , vertices should be followed by edges that lines starting with 'v' must become before lines starting with 'e'.</p>\n                \n\n\n            </div>\n            <div className=\"datasetandmodelling_example\">\n            <h5 className=\"heading_datamodelling\">Example</h5>\n\n            <img src={Image} className=\"graph_image\"></img>\n            </div>\n            </div>\n        </div>\n    );\n}\nexport default Dataset;","/home/mayakuntla/Videos/cp/src/Components/Navbar/Mainnavbar.js",["106","107","108","109","110","111","112"],"import React, { useState,useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { SidebarData } from './SidebarData';\nimport './Mainnavbar.css';\nimport * as FaIcons from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport Image from '../../Images/DSAC.jpeg';\nimport Image_iiith from '../../Images/IIITH.jpeg';\nimport history from '../../history.js';\nimport AppContext from '../App_context';\nimport SubMenu from './SubMenu';\n\nfunction Mainnavbar() {\n  const myContext = useContext(AppContext);\n  const [expand_icon,setexpandicon]=useState(false);\n\n  \n  const expandthis=()=>{\n    setexpandicon(true);\n  }\n  \n  const closethis=()=>{\n    setexpandicon(false);\n  }\n  \n  return (\n    <>\n\n      <IconContext.Provider value={{ color: '#fff' }}>\n        <div className=\"div_with_logo\">\n            <img className=\"logo1\" src={Image}></img>\n            <div className=\"headingdiv\">\n              <h1 className=\"heading\">Data Science And Analytics Center</h1>\n            </div>\n            <img className=\"logo2\" src={Image_iiith}></img>\n        </div>\n        <div>\n          <div className=\"div_on_top_in_sidebar_expand\"><div className={\"topic_heading\"}>Subgraph Coverage Patterns</div>\n          <div className=\"div_containing_icons\">\n          <ul className='nav-menu-items1'>\n            \n            {SidebarData.map((item, index) => {\n              return (\n                <li key={index} className=\"icons_in_sidebar\">\n                    <Link to={item.path}>\n                      {item.icon}\n                    </Link>\n                   \n\n                   \n                   \n                </li>\n\n              );\n            })}\n          </ul>\n          </div>\n        </div>\n    \n\n        <div className={'nav_on_active'}>\n            <Link to=\"#\" className=\"menu-bars\">\n                <FaIcons.FaBars className=\"icon\"/>\n            </Link>\n        \n            <nav className={'nav-menu active'}>\n          <ul className='nav-menu-items'>\n            \n            {SidebarData.map((item, index) => {\n              \n              return  <SubMenu item={item} sidebar={1} key={index} />;\n              \n            })}\n          </ul>\n        </nav>\n        </div>\n        \n        {/*<div className='navbar'>\n          <Link to='#' className='menu-bars'>\n            <FaIcons.FaBars className=\"icon\" onClick={showSidebar} />\n          </Link>\n          <div className={sidebar ? 'font-move' : 'font-stay'}></div>\n            <h1>dsfsdfs</h1>\n        </div>\n        <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\n          <ul className='nav-menu-items' onClick={showSidebar}>\n            <li className='navbar-toggle'>\n              <Link to='#' className='menu-bars'>\n                <AiIcons.AiOutlineClose />\n              </Link>\n            </li>\n            {SidebarData.map((item, index) => {\n              return (\n                <li key={index} className={item.cName}>\n                  <Link to={item.path}>\n                    {item.icon}\n                    <span>{item.title}</span>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>*/}\n        </div>\n      </IconContext.Provider>\n    </>\n  );\n}\n\nexport default Mainnavbar;","/home/mayakuntla/Videos/cp/src/Components/Pages/Scp_home.js",["113","114","115","116","117","118","119","120","121","122","123","124","125","126","127"],"import { useContext, useState } from \"react\";\nimport React from 'react';\nimport AppContext from '../App_context';\nimport './Scp_home.css';\nimport { Link } from 'react-router-dom';\nimport Image from '../../Images/Graph_transaction.jpg';\nimport Image1 from '../../Images/SIFT_framework.png';\nimport Box from '@material-ui/core/Box';\nimport { FaItalic } from \"react-icons/fa\";\nimport Image6 from '../../Images/Coverage_Support.png';\nimport { useEffect, useRef} from \"react\";\nimport Image5 from '../../Images/Relative_Frequency_Formula.png';\nimport Image7 from '../../Images/Overlap_Ratio.png';\n\n\nfunction Scp_home() {\n    const myContext = useContext(AppContext);\n    const [show_content,set_show_content]= useState(0);\n    const [selected_def_for_modal,set_selected_def_for_modal]=useState(\"\");\n    const [show_modal,set_show_modal]=React.useState(false);\n    const show_modal_with_def=(mincs)=>{\n        document.getElementById(\"modal\").style.display=\"block\";\n        set_selected_def_for_modal(mincs);\n        set_show_modal(true);\n    }\n    var modal = document.getElementById('modal');\n    window.onclick = function(event)\n    {\n        if (event.target == modal)\n        {\n            modal.style.display = \"none\";\n        }\n    }\n    \n    return (\n        <>\n        \n        <div className={myContext.side ? \"scp_main_div_shrink\" : \"scp_main_div\"}>\n            <div className=\"scp_heading\">\n                Subgraph Coverage Patterns\n            </div>\n            <hr className=\"scp_horizontal_line\"/>\n        </div>\n            <div className={myContext.side ? \"scp_content\" : \"scp_content_expand\"}>\n                <div className=\"first_para\">\n                <p>Pattern mining from Graph Transactional Data ({' '}<i>GTD</i>{' '}) is an active area of research with applications in the domains of bioinformatics, chemical informatics and social networks.{' '}Existing works address \n                the problem of mining frequent subgraphs from <i>GTD</i>.{' '}However,{' '}the knowledge concerning the coverage aspect of a set of subgraphs is also valuable for improving the performance of several applications.</p>\n                </div>\n                <div className=\"scp_definition\">\n                    <div>\n                    {show_content ? <Box className=\"box1\">\n                        <div className=\"dropdown_heading\">Contents [<div className=\"show_hide\" onClick={()=>set_show_content(!show_content)}>Hide</div> ] </div>\n                        <div className=\"list_of_contents\">\n                            <div><a href=\"#def\">1. Definiton</a></div>\n                            <div><a href=\"#example\">2. Example</a></div>\n                            <div><a href=\"#framework\">3. SIFT Framework</a></div>\n                        </div>\n                    \n                    </Box> :\n                    <Box className=\"box1\">\n                        <div className=\"dropdown_heading\">Contents [<div className=\"show_hide\" onClick={()=>set_show_content(!show_content)}>Show</div>]</div>\n                    </Box>}\n                    </div>\n                </div>\n                <div className=\"scp_definition_heading\" id=\"def\">\n                    Definition\n                </div>\n                <div className=\"scp_definition\">\n                    <p>Given a graph transactional dataset and user defined constraints <i onClick={()=>{show_modal_with_def(\"minrf\")}} className=\"def\">minimum Relative Frequency{' '}({' '}minRF{' '}){' '}</i>,{' '}<i onClick={()=>{show_modal_with_def(\"mincs\")}} className=\"def\">minimum Coverage Support{' '}({' '}minCS{' '})</i> and <i onClick={()=>{show_modal_with_def(\"maxor\")}} className=\"def\">maximum Overlap Ratio{' '}({' '}maxOR{' '})</i>,{' '}a set of subgraphs say <i>SP</i> {'  '}is called \n                    Subgraph Coverage Pattern if <i onClick={()=>{show_modal_with_def(\"mincs\")}} className=\"def\">Coverage Support of SP</i> {\">=\"} <i>minCS</i> and <i onClick={()=>{show_modal_with_def(\"minrf\")}} className=\"def\">Relative Frequency of SP</i>{' '} {\">=\"} <i>minRF</i> and <i onClick={()=>{show_modal_with_def(\"maxor\")}} className=\"def\">Overlap Ratio</i> {\"<=\"} <i>maxOR</i>.</p>\n                </div>\n                <div className={show_modal ? \"def_modal\" : \"display_none\"} id=\"modal\" >\n                    {selected_def_for_modal==\"mincs\" ?<>\n                    <div className=\"def_modal_content\">\n                        <span className=\"close\" onClick={()=>set_show_modal(false)} >&times;</span>\n                        <Box className=\"box_def\">\n                            <div className=\"box_heading_def\">\n                                Coverage Support\n                            </div>\n                        </Box>\n                        <div className=\"terms_definition_def\">\n                            <div>\n                                <p className=\"para\">Given Graph Transactional Dataset <i>D</i> and a subgraph pattern <i>SP</i>,{' '}the coverage support of <i>SP ({' '}CS<sub>g</sub> (SP, D){' '})</i> is the percentage of graph\n                                    transactions in <i>D</i> covered by at least one subgraph in\n                                    {'  '}<i>SP</i> .\n                                </p>\n                                <p className=\"para\">Here, <i>0 ≤ CS<sub>g</sub> (SP, D) ≤ 1</i></p>\n                                <p className=\"para\"><i>CS<sub>g</sub> (SP, D) = 1</i>\n                                    {' '}when all of the graph transactions in <i>D</i> are covered\n                                    by <i>SP</i> . Conversely, <i>CS<sub>g</sub> (SP, D) = 0</i> when none of the\n                                    graph transactions are covered by <i>SP</i>.{' '}A pattern <i>SP</i> is interesting with respect to coverage point of view\n                                    if <i>CS<sub>g</sub> (SP, D) ≥ minCS<sub>g</sub></i>,{' '}where <i>minCS<sub>g</sub></i> is a userdefined minimum Coverage Support threshold for graph\n                                    transactions. \n                                </p>\n                                <div className=\"scp_definition_heading\" id=\"example\">\n                                    Example\n                                </div>\n                            </div>\n                            <div className=\"scp_definition\">\n                                <img className=\"terms_example_image\" src={Image6}></img>\n                                <div className=\"terms_image_name\">Fig. 1: Formula for Coverage Support of a Subgraph Pattern SP in D </div>\n                            </div>\n                        </div>\n                        <div className=\"terms_example_definition_def\">\n                            <img src={Image} className=\"example_image\"></img>\n                            <div className=\"image_name\">\n                                Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with minRF<sub>g</sub> = {' '}0.2.\n                            </div>\n                            <p className=\"para_down_example_def\">\n                                Consider graph transactional dataset <i>D</i> comprising of 10 graph transactions <i>G<sub>1</sub></i> to\n                                <i>G<sub>10</sub></i> , shown in Figure 2(a). Three subgraphs <i>S<sub>1</sub>,{' '}S<sub>2</sub></i>{' '} and\n                                {' '}<i>S<sub>3</sub></i> are shown in Figure 2(b). Let Subgraph Pattern <i>SP = {\"{\"} S<sub>1</sub>,{' '}S<sub>2</sub>,{' '}S<sub>3</sub> {\"}\"}</i>.{' '}Here, <i>S<sub>1</sub></i> is a subgraph of\n                                {' '}<i>G<sub>1</sub>, G<sub>6</sub></i> and <i>G<sub>10</sub></i> ;{' '}<i>S<sub>2</sub></i> is a subgraph of <i>G<sub>5</sub>, G<sub>7</sub></i> and <i>G<sub>8</sub></i> ; and\n                                {' '}<i>S<sub>3</sub></i> is a subgraph of <i>G<sub>4</sub></i> and <i>G<sub>7</sub></i>.{' '}The subgraph <i>S<sub>1</sub></i> is said\n                                to cover <i>G<sub>1</sub></i> since <i>S<sub>1</sub> ⊆ G<sub>1</sub></i>.{' '}Hence,{' '}<i>Cover({' '}S<sub>1</sub>,{' '}G<sub>1</sub>{' '}){' '}={' '}1</i>.\n                                {' '}Moreover, <i>|CSet(SP , D)| / |D| = |{\"{\"}G<sub>1</sub>,{' '}G<sub>6</sub>,{' '}G<sub>10</sub>{\"}\"} ∪ {\"{\"}G<sub>5</sub> ,G<sub>7</sub>,G <sub>8</sub> {\"}\"} ∪ {\"{\"}G<sub>4</sub> ,G <sub>7</sub>{\"}\"} | = 8 /10 = 0.8</i>{' '}.\n                            </p>\n                        </div>\n                    </div></> :<>\n                    {selected_def_for_modal==\"minrf\" ? \n                    <div className=\"def_modal_content\">\n                        <span className=\"close\" onClick={()=>set_show_modal(false)} >&times;</span>\n                        <Box className=\"box_def\">\n                            <div className=\"box_heading_def\">\n                                Relative Frequency of a Subgraph\n                            </div>\n                        </Box>\n                        <div className=\"terms_definition_def\">\n                            <div>\n                                <p className=\"para\">Given Graph Transactional Data <i>D</i> and a subgraph <i>S<sub>j</sub>{' '},</i>{' '}we denote the percentage of graph\n                                    transactions in <i>D</i> covered by <i>S<sub>j</sub></i> as Relative Frequency.\n                                    Formula for computing <i>Relative Frequency of Subgraph S<sub>j</sub></i> in <i>D</i> is shown in figure 1.\n                                </p>\n                                <p className=\"para\">Here,{' '}<i>0 ≤ RF<sub>g</sub> (S<sub>j</sub>,{' '}D) ≤ 1</i>.{' '}We can extract subgraphs of\n                                    interest from <i>D</i> based on user-specified <i>minRF<sub>g</sub></i> threshold.\n                                </p>\n                                <div className=\"scp_definition_heading\" id=\"example\">\n                                    Example\n                                </div>\n                            </div>\n                            <div className=\"scp_definition\">\n                                <img className=\"terms_example_image\" src={Image5}></img>\n                                <div className=\"terms_image_name\">\n                                    Fig. 1: Formula for Relative Frequency of Subgraph <i>S<sub>j</sub></i> in <i>D</i> \n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"terms_example_definition_def\">\n                            <img src={Image} className=\"example_image\"></img>\n                                <div className=\"image_name\">\n                                    Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with <i>minRF<sub>g</sub> = 0.2</i>\n                                </div>\n                                <p className=\"para_down_example_def\">\n                                    Consider graph transactional dataset <i>D</i> comprising of 10 graph transactions <i>G<sub>1</sub> to\n                                    G<sub>10</sub></i>{' '}, shown in Figure 2(a).{' '}Three subgraphs <i>S<sub>1</sub>,{' '}S<sub>2</sub> and\n                                    {' '}S<sub>3</sub></i> are shown in Figure 2(b). Here,{' '}<i>S<sub>1</sub></i> is a subgraph of\n                                    <i>G<sub>1</sub>,{' '}G<sub>6</sub> and G<sub>10</sub></i> ;{' '}<i>S<sub>2</sub></i> is a subgraph of <i>G<sub>5</sub>,{' '}G<sub>7</sub> and G<sub>8</sub></i> ;{' '} and\n                                    <i>S<sub>3</sub></i> is a subgraph of <i>G<sub>4</sub> and G<sub>7</sub></i> .{' '}The subgraph <i>S<sub>1</sub></i> is said\n                                    to cover <i>G<sub>1</sub></i> since <i>S<sub>1</sub> ⊆ G<sub>1</sub></i>.{' '}Hence,{' '}cover<i>({' '}S<sub>1</sub>,{' '}G<sub>1</sub>{' '}) = 1</i>.\n                                    {' '}Moreover,{' '}<i>CSet({' '}S<sub>1</sub> , D) = {\"{\"}{' '}G<sub>1</sub>,{' '}G<sub>6</sub>,{' '}G<sub>10</sub>{' '}{\"}\"}</i> and <i>RF<sub>g</sub> ({' '}S<sub>1</sub>,{' '}D{' '}) = |Cset({' '}S<sub>1</sub>)|/D = 3/10 = 0.3</i>.\n                                    Similarly RF values of <i>S<sub>2</sub>,{' '}\n                                    S<sub>3</sub></i> are 0.3 and 0.2 respectively.\n                                </p>\n                        </div>\n                    </div> :\n                    <div className=\"def_modal_content\">\n                        <span className=\"close\" onClick={()=>set_show_modal(false)} >&times;</span>\n                        <Box className=\"box_def\" >\n                            <div className=\"box_heading_def\">\n                                Overlap Ratio of a Pattern X\n                            </div>\n                        </Box>\n                        <div className=\"terms_definition_def\">\n                            <div>\n                                <p className=\"para\">Let <i>X = {\"{\"}O<sub>p</sub>,{' '}O<sub>q</sub>,{' '}. . . , O<sub>r</sub>,{' '}O<sub>s</sub> {\"}\"}</i> be a pattern such that\n                                    <i>RF{' '}(O<sub>p</sub>{' '}) ≥ RF{' '}(O<sub>q</sub>{' '}) ≥ · · · ≥ RF{' '}(O<sub>r</sub>{' '}) ≥ RF{' '}(O<sub>s</sub>{' '})</i>. (Here,\n                                    the notations <i>O<sub>p</sub> , O<sub>q</sub> , O<sub>r</sub>, and O<sub>s</sub></i> represent Subgraph IDs{' '}). The\n                                    overlap ratio of a pattern X is defined as the ratio of\n                                    the number of transactions common in <i>CSet{' '}(X −{' '}{\"{\"}O<sub>s</sub>{' '}{\"}\"}{' '})\n                                    and CSet{' '}(O<sub>s</sub>{' '})</i> to <i>CSet{' '}(O<sub>s</sub>{' '})</i>.{' '}It is defined as shown in figure 1.\n                                </p>\n                                <p className=\"para\">\n                                    For a pattern <i>X</i>,{' '}<i>0{' '} ≤{' '}OR(X){' '} ≤{' '}1</i>.\n                                </p>\n                                <p className=\"para\">\n                                    A pattern <i>X</i>\n                                    is interesting if <i>OR{' '}(X) ≤ maxOR</i>, where <i>maxOR</i> is\n                                    a user-defined maximum overlap ratio threshold.\n                                </p>\n                                <div className=\"scp_definition_heading\" id=\"example\">\n                                    Example\n                                </div>\n         \n                            </div>\n                            <div className=\"scp_definition\">\n                                <img className=\"terms_example_image\" src={Image7}></img>\n                                <div className=\"terms_image_name\">\n                                    Fig. 1: Formula for Overlap Ratio of a pattern X.\n                                </div>\n                            </div>\n                        </div>\n                        <div className=\"terms_example_definition_def\">\n                            <img src={Image} className=\"example_image\"></img>\n                            <div className=\"image_name\">\n                                Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with minRF<sub>g</sub> = 0.2.\n                            </div>\n                            <p className=\"para_down_example_def\">\n                                Consider graph transactional dataset <i>D</i> comprising of 10 graph transactions <i>G<sub>1</sub></i> to\n                                <i>G<sub>10</sub></i>,{' '}shown in Figure 2(a).{' '}Three subgraphs <i>S<sub>1</sub></i>,{' '}<i>S<sub>2</sub></i> and\n                                <i>S<sub>3</sub></i> are shown in Figure 2(b).{' '}Let Subgraph Pattern <i>SP = {\"{\"} S<sub>1</sub>,S<sub>2</sub>,S<sub>3</sub> {\"}\"}</i>.{' '}Here,{' '}<i>S<sub>1</sub></i> is a subgraph of\n                                <i>G<sub>1</sub></i>,{' '}<i>G<sub>6</sub></i> and <i>G<sub>10</sub></i> ;{' '}<i>S<sub>2</sub></i> is a subgraph of <i>G<sub>5</sub></i> , {' '}<i>G<sub>7</sub></i> and <i>G<sub>8</sub></i> ; and\n                                <i>S<sub>3</sub></i> is a subgraph of <i>G<sub>4</sub></i> and <i>G<sub>7</sub></i>.{' '}The subgraph <i>S<sub>1</sub></i> is said\n                                to cover <i>G<sub>1</sub></i> since <i>S<sub>1</sub> ⊆ G<sub>1</sub></i>. Hence,{' '}<i>cover({' '}S<sub>1</sub>,{' '}G<sub>1</sub>{' '}){' '}={' '}1</i>.\n                                {' '}Moreover,{' '}<i>|{' '}CSet(SP , D){' '}| / |D| = |{' '}{\"{\"}G<sub>1</sub>,{' '}G<sub>6</sub>,{' '}G<sub>10</sub>{' '}{\"}\"} ∪ {\"{\"}{' '}G<sub>5</sub>,{' '}G<sub>7</sub>,{' '}G<sub>8</sub> {\"}\"} ∪ {\"{\"}{' '}G<sub>4</sub>,{' '}G<sub>7</sub>{' '}{\"}\"} |</i> = 8 / 10 = 0.8.\n                            </p>\n                        </div>\n                    </div>}\n                    </>}\n                </div>\n                <div className=\"scp_definition_heading\" id=\"example\">\n                    Example\n                </div>\n                <div className=\"scp_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 1: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with minRF g =0.2</div>\n                    <div>\n                        <p>\n                            Figure 1.a of above image is the Graph Transactional Dataset consisting of 10 graphs.{' '}In Figure 2(b),{' '}let <i>SP</i> be the set <i>{\"{ S1, S2, S3 }\"}</i>.{' '}The <i>RF</i> values of <i>S1,{' '}S2 and S3</i> are 0.3,{' '}0.3 and 0.2 respectively.{' '}The coverage set of <i>SP</i>,{' '}<i>CSet({' '}SP,{' '}D{' '})</i>{' '}=\n                            {' '}<i>{\"{ G1, G4, G5, G6, G7, G8, G10 }\"}</i>.{' '}The <i onClick={()=>show_modal_with_def(\"mincs\")} className=\"def\">coverage support</i> of <i>SP</i>,{' '}<i>CS{<sub>g</sub>} (SP, D) = |{' '}CSet(SP,D){' '}| / |D|</i> = 7/10 = 0.7.{' '}The multiset of transactions covered by pattern <i>SP,{' '}M({' '}SP, D{' '}){' '}=\n                            {' '}{\"{ ( G1, G6, G10 ), ( G5, G7, G8 ), ( G4, G7 ) }\"}</i>. Therefore, the overlap among transactions covered by subgraphs of <i>SP ,overlap{<sub>g</sub>}{' '}({' '}SP,{' '}D{' '}) = ({' '}|{' '}M (SP,{' '}D){' '}|{' '}/{' '}|{' '}CSet({' '}SP,{' '}D{' '}){' '}|{' '}){' '}-{' '}1</i> = (8/7) - 1 = 0.142.{' '}Given the values of <i>minRF{<sub>g</sub>}</i> = 0.2, <i>minCS{<sub>g</sub>}</i> = 0.7 and \n                            {' '}<i>maxOR{<sub>g</sub>}</i> = 0.5, the pattern <i>SP = {\"{ S1, S2, S3 }\"}</i> is an SCP.\n                        </p>\n                    </div>\n                </div>\n                <div className=\"scp_definition_heading\" id=\"framework\">\n                    SIFT Framework\n                </div>\n                <div className=\"scp_definition\">\n                    <p>\n                        <b><i>Subgraph ID based Flat Transactional{' '}({' '}SIFT{' '})</i></b>{'  '}framework is generalized in the sense that\n                        it extracts all potential SCPs from GTD subject to\n                        user-specified thresholds of <i onClick={()=>{show_modal_with_def(\"minrf\")}} className=\"def\">relative frequency</i>,{' '}<i onClick={()=>{show_modal_with_def(\"mincs\")}} className=\"def\">coverage\n                        support</i> and <i onClick={()=>{show_modal_with_def(\"maxor\")}} className=\"def\">overlap ratio</i>.{' '}The framework consists of three parts for extracting SCPs from Graph Transactional Dataset.\n                    </p>\n                </div>\n                <div className=\"text_and_image\">\n                    <div className=\"scp_definition_text\">\n                        <p className=\"text_para\"><pre className=\"tab1\">                       1.  </pre><p>First,{' '}for extracting subgraphs from <i>D</i>,{' '}which satisfies the <i>minRF<sub>g</sub>{' '}</i>{' '}constraint, an existing subgraph discovery algorithm, such as <i onClick={()=>window.open('https://www.slideshare.net/SadikMussah/gspan-algorithm',\"_blank\")} className=\"def\">gSpan</i> can be employed.{' '}We construct the database of \n                        <i>{\" <SID, Clabel>\"}</i> as the output,{' '}where <i>SID is a Subgraph Identifier</i> and <i>Clabel is minimum DFS code assigned as canonical label to subgraph</i>.\n                        </p></p>\n                        <p className=\"text_para\"><pre className=\"tab1\">                       2.  </pre><p>Second,{' '}with the database of <i>{\"<SID, Clabel>\"}</i>\n{' '}as the input,{' '}we form the SID-based flat transactional\ndataset,{' '}where each SID-based flat transaction consists\nof all SIDs of subgraphs corresponding graph transaction.{' '}In this step,{' '}we map SIDs to corresponding graph\ntransaction identifier <i>({' '}GID{' '})</i> and form the database of <i>{\"<GID, SIDs[ ] > \"}</i> as the output.{' '}This forms the SID-\nbased flat transactional dataset.\n                        </p></p>\n                        <p className=\"text_para\"><pre className=\"tab1\">                       3.  </pre><p>Third,{' '}after forming\nthe SID-based flat transactional dataset,{' '}the problem of\nextracting candidate SCPs becomes the problem of extracting coverage patterns.{' '}Therefore,{' '}we can employ an\nexisting coverage pattern mining algorithm to extract SCPs.{' '}For efficient extraction of SCPs,{' '}we employ\na pruning heuristic related to overlap and efficiently\nextract SCPs subject to the <i>minCS<sub>g</sub></i> and <i>minOR<sub>g</sub></i> constraints.\n                        </p></p>\n                    </div>\n                    <div>\n                        <img src={Image1} className=\"example_image2\"></img>\n                    </div>\n                </div>\n                \n            </div>\n            \n        </>\n  );\n}\n\nexport default Scp_home;","/home/mayakuntla/Videos/cp/src/Components/Navbar/Scpnavbar.js",["128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161"],"import React, { useState,useContext } from 'react';\nimport { Link } from 'react-router-dom';\nimport { SidebarData } from './SidebarData';\nimport { CpData } from './Cp_Data';\nimport { MainsidebarData} from './Mainsidebardata';\nimport styled from \"styled-components\";\nimport Scp_home from '../Pages/Scp_home';\n\nimport './Scpnavbar.css';\nimport * as FaIcons from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport Image from '../../Images/DSAC.jpeg';\nimport Image_iiith from '../../Images/IIITH.jpeg';\nimport history from '../../history.js';\nimport AppContext from '../App_context';\nimport SubMenu from './SubMenu';\n\nconst SidebarLink = styled(Link)`\n  display: flex;\n  color: #e1e9fc;\n  justify-content: space-between;\n  align-items: center;\n  list-style: none;\n  text-decoration: none;\n  font-size: 16px;\n  margin-left: 0%;\n  margin-top: 0.5ch;\n  margin-bottom: 1ch;\n  margin-right: 1ch;\n  height:35px;\n  \n  \n  &:hover {\n    background: #252831;\n    border-left: 4px solid green;\n    cursor: pointer;\n  }\n`;\n\nconst MainSidebarLink = styled(Link)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  list-style: none;\n  text-decoration: none;\n  font-size: 16px;\n  color:#080808;\n  font-family: Georgia, 'Times New Roman', Times, serif;\n  margin-botton:1ch;\n  \n  \n  \n  \n  \n  &:hover {\n    cursor: pointer;\n  }\n`;\n  \nconst SidebarLabel = styled.span`\n`;\n\nfunction Scpnavbar() {\n  const [sidebar, setSidebar] = useState(true);\n  const myContext = useContext(AppContext);\n  const [expand_icon,setexpandicon]=useState(false);\n  const [scp_patterns,setscppatterns]=useState(0);\n  const [coverage_patterns,setcoveragepatterns]=useState(0);\n\n  const showSidebar = () =>\n  {\n    setSidebar(!sidebar);\n    myContext.show();\n\n  }\n\n  const expandthis=()=>\n  {\n    setexpandicon(true);\n  }\n  \n  const closethis=()=>\n  {\n    setexpandicon(false);\n  }\n  \n  const setpatterns=(value)=>\n  {\n    if(value==1 || value=='1')\n    {\n      setcoveragepatterns(0);\n      setscppatterns(1);\n    }\n    else if(value==2 || value=='2')\n    {\n      setscppatterns(0);\n      setcoveragepatterns(1);\n    }\n  }\n  const go_to_main_page=()=>{\n    alert(\"hi\");\n    console.log(\"came_to_def\");\n    setcoveragepatterns(0);\n    setscppatterns(0);\n  }\n  return (\n    <>\n      <IconContext.Provider value={{ color: '#fff'}}>\n        <div className=\"div_with_logo1\">\n            <img className=\"logo1\" src={Image}></img>\n            <div className=\"headingdiv\">\n              <h1 className=\"heading1\">Data Science And Analytics Center</h1>\n              \n            </div>\n            <img className=\"logo3\" src={Image_iiith}></img>\n        </div>\n        <div>\n          <div className={sidebar ? \"short_side_bar_disable\" : 'short_side_bar'}>\n            <div className={sidebar ? \"div_on_top_in_sidebar_expand\" : \"div_on_top_in_sidebar\"} ><div className={sidebar ? \"topic_heading\" : \"topic_heading_disable\"}>\n              {\n                scp_patterns==0 && coverage_patterns==0 ? \n                <div>\n                  <MainSidebarLink to={'/'}>\n                    <div className=\"main_heading\">\n                      Home\n                    </div>\n                  </MainSidebarLink>\n                </div> : \n                scp_patterns!=0 && coverage_patterns==0 ? \n                <div>\n                  <MainSidebarLink to={'/scp_patterns_home'}>\n                    <div className=\"main_heading\">\n                      Subgraph Coverage Patterns\n                    </div>\n                  </MainSidebarLink>\n                </div> : \n                scp_patterns==0 && coverage_patterns!=0 ?\n                <div>\n                  <MainSidebarLink to={'/coverage_patterns_home'}>\n                    <div className=\"main_heading\">\n                      Coverage Patterns\n                    </div>\n                  </MainSidebarLink>\n                </div> :\n                <div></div>\n              }\n            </div>\n            <div className=\"div_containing_icons\">\n              <ul className='nav-menu-items1'>\n                {scp_patterns==0 && coverage_patterns==0 ? \n                MainsidebarData.map((item, index) => \n                {\n                  return(\n                    <li key={index} className=\"icons_in_sidebar\" onClick={()=>setpatterns(item.value)}>\n                      <Link to={item.path}>\n                        {item.icon}\n                      </Link>\n                    </li>\n                  );\n                }) : \n                scp_patterns!=0 && coverage_patterns==0 ? \n                \n                SidebarData.map((item, index) => \n                {\n                  return (\n                    \n                    <li key={index} className=\"icons_in_sidebar\">\n                      <Link to={item.path}>\n                        {item.icon}\n                      </Link>\n                    </li>\n                  );\n                }) \n                : \n                scp_patterns==0 && coverage_patterns!=0 ?\n                CpData.map((item, index) => \n                {\n                  return (\n                    <li key={index} className=\"icons_in_sidebar\">\n                      <Link to={item.path}>\n                        {item.icon}\n                      </Link>\n                    </li>\n                  );\n                }) :\n                <div></div>\n                }\n              </ul>\n            </div>\n          </div>\n        </div>\n        <div className={sidebar ? 'nav_on_active' : 'nav_normal'}>\n          <MainSidebarLink to={'/'} className=\"menu-bars\" >\n            <FaIcons.FaHome className=\"icon\" onClick={()=>{setscppatterns(0);setcoveragepatterns(0)}}/>\n          </MainSidebarLink>\n          <nav className={sidebar ? 'nav-menu1 active' : 'nav-menu1'}>\n            <ul className='nav-menu-items'>\n              {scp_patterns==0 && coverage_patterns==0 ? MainsidebarData.map((item, index) => \n              {\n                return(\n                  <>\n                     <SubMenu item={item} sidebar={sidebar}  key={index} />\n                  </>\n                );\n              }) : \n              scp_patterns!=0 && coverage_patterns==0 ? \n              \n              (SidebarData.map((item, index) => \n              {\n                if(index!=SidebarData.length-1){\n                return(\n                  <>\n                    <SubMenu item={item} sidebar={sidebar} key={index}/>\n                  </>\n                );}\n                else{\n                  return(\n                    <>\n                    <SubMenu item={item} sidebar={sidebar} key={index}/>\n                    <MainSidebarLink to='coverage_patterns_home' onClick={()=>{setscppatterns(0);setcoveragepatterns(1)}}>\n                     <div className=\"main_heading\">\n                      Coverage Patterns\n                      </div>\n                    </MainSidebarLink>\n                  </>\n                  )\n                }\n              }))\n              : \n              scp_patterns==0 && coverage_patterns!=0 ?\n              CpData.map((item, index) => \n              {\n                return <SubMenu item={item} sidebar={sidebar} key={index} />;\n              }):\n              <div></div>\n              } \n    \n            </ul>\n          </nav>\n        </div>\n        \n        {/*<div className='navbar'>\n          <Link to='#' className='menu-bars'>\n            <FaIcons.FaBars className=\"icon\" onClick={showSidebar} />\n          </Link>\n          <div className={sidebar ? 'font-move' : 'font-stay'}></div>\n            <h1>dsfsdfs</h1>\n        </div>\n        <nav className={sidebar ? 'nav-menu active' : 'nav-menu'}>\n          <ul className='nav-menu-items' onClick={showSidebar}>\n            <li className='navbar-toggle'>\n              <Link to='#' className='menu-bars'>\n                <AiIcons.AiOutlineClose />\n              </Link>\n            </li>\n            {SidebarData.map((item, index) => {\n              return (\n                <li key={index} className={item.cName}>\n                  <Link to={item.path}>\n                    {item.icon}\n                    <span>{item.title}</span>\n                  </Link>\n                </li>\n              );\n            })}\n          </ul>\n        </nav>*/}\n      </div>\n      </IconContext.Provider>\n    </>\n  );\n}\n\nexport default Scpnavbar;","/home/mayakuntla/Videos/cp/src/Components/Guidelines/Guidelines.js",["162","163","164","165","166","167","168","169","170"],"import React, {useState,useContext} from 'react';\nimport './Form1.css';\nimport AppContext from '../App_context';\nimport { Container } from 'reactstrap';\nimport axios from 'axios';\nimport * as FaIcons from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport Loader from \"react-loader-spinner\";\nimport Button from '@material-ui/core/Button';\n\nconst Guidelines=()=>{\n    return(<div></div>);\n}\nexport default Guidelines;","/home/mayakuntla/Videos/cp/src/Components/Tutorial/Terms_used.js",["171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190"],"import React,{useContext} from 'react';\nimport { useState } from 'react';\nimport './Terms_used.css';\nimport Image from '../../Images/Graph_transaction.jpg';\nimport Image1 from '../../Images/Relative_Frequency.png';\nimport ReactTooltip from \"react-tooltip\";\nimport AppContext from '../App_context';\nimport Box from '@material-ui/core/Box';\nimport Image3 from '../../Images/graph_transaction_example.png';\nimport Image4 from '../../Images/Cover.png';\nimport Image5 from '../../Images/Relative_Frequency_Formula.png';\nimport Image6 from '../../Images/Coverage_Support.png';\nimport Image7 from '../../Images/Overlap_Ratio.png';\nimport * as FaIcons from 'react-icons/fa';\n\nimport { array } from 'prop-types';\n\n\nfunction Terms_used(props) {\n  console.log(\"dfdf\");\n  const myContext = useContext(AppContext);\n  const [show_content,set_show_content]= useState(0);\n  const [show_terms,set_show_terms]=useState([0,0,0,0,0,0]);\n  const go_to_set=(index)=>{\n    let array=[...show_terms];\n    array[index]=!array[index];\n    set_show_terms(array);\n\n  }\n  return (\n    <>\n       {/* <div className={myContext.side?\"mainheading\":\"mainheadingexpand\"}>Terms Used</div>\n\n    <div className={myContext.side ? \"main_card\" : \"main_card_expand\"}>\n      <div className=\"inside_div\">\n        <div className=\"mincs\">\n          <div className=\"side_heading\">Minimum Coverage Support</div>\n            <div className=\"content\">\n              <div className=\"table\">\n                <table>\n                  <tr>\n                    <th data-tip=\"Transaction Id\" data-for='toolTip1' data-place='top'>TID\n                    <ReactTooltip id=\"toolTip1\" className=\"tooltip\" /></th>\n                    <th>1</th>\n                    <th>2</th>\n                    <th>3</th>\n                    <th>4</th>\n                    <th>5</th>\n                    <th>6</th>\n                    <th>7</th>\n                    <th>8</th>\n                    <th>9</th>\n                    <th>10</th>\n                  </tr>\n                  <tr>\n                    <td>Items</td>\n                    <td>a,b,c</td>\n                    <td>a,c,e</td>\n                    <td>a,c,e</td>\n                    <td>a,c,d</td>\n                    <td>b,d,f</td>\n                    <td>b,d</td>\n                    <td>b,d</td>\n                    <td>b,e</td>\n                    <td>b,e</td>\n                    <td>a,b</td>\n                  </tr>\n                </table>\n              </div>\n              <div className=\"description\">\n                  <div className=\"subcontent\">\n                    <p className=\"sideheader\">Coverage Set of a Pattern</p>\n                    <p className=\"cont\">Coverage Set of a pattern X = {\"{\"} w {<sup>p</sup>},w {<sup>q</sup>},......w {<sup>r</sup>} {\"}\"} {\" \"}{\"1<=p<=q<=r<=n\"} where n is the number of Transactions is</p>\n                    <div className=\"setofpoints\">\n                      <li>Set of distinct TIDs that contain atleast item of X</li>\n                      <li>Denoted by CSET(X)</li>\n                      <li>CSET(X) = T(w{<sup>p</sup>}) U T(w{<sup>q</sup>}) U ..... U T(w{<sup>r</sup>})</li>\n                      <li>T(w{<sup>p</sup>}) = TIDs that contain item w{<sup>p</sup>}</li>\n                    </div>\n                    <p className=\"Example\">Example from the above table : </p>\n                    <p className=\"example_cont\">Coverage Set of Pattern X={\"{c,d}\"} is {\"{ 2,3,4,5,6,7 }\"}.</p>\n                    <p className=\"sideheader\">Coverage Support of a Pattern</p>\n                    <p className=\"cont\">Coverage Supportof a pattern X = {\"{\"} w {<sup>p</sup>},w {<sup>q</sup>},......w {<sup>r</sup>} {\"}\"} {\" \"}{\"1<=p<=q<=r<=n\"} where n is the number of Transactions is</p>\n                    <div className=\"setofpoints\">\n                      <li>Ratio of size of coverage set of pattern X to the number of total transactions.</li>\n                    </div>\n                    <p className=\"Example\">Example from the above table : </p>\n                    <p className=\"example_cont\">Coverage Support of Pattern X={\"{c,d}\"} = (Size of Coverage Set of X)/(Total number of Transactions) = 6/10 = 0.6</p>\n                  </div>\n              </div>\n            </div>\n        </div>\n      \n        <div className=\"minrf\">\n            <div className=\"side_heading\">Minimum Relative Frequency</div>\n            <div className=\"content\">\n              <div className=\"table\">\n                <table>\n                  <tr>\n                    <th data-tip=\"Transaction Id\" data-for='toolTip1' data-place='top'>TID\n                    <ReactTooltip id=\"toolTip1\" className=\"tooltip\" /></th>\n                    <th>1</th>\n                    <th>2</th>\n                    <th>3</th>\n                    <th>4</th>\n                    <th>5</th>\n                    <th>6</th>\n                    <th>7</th>\n                    <th>8</th>\n                    <th>9</th>\n                    <th>10</th>\n                  </tr>\n                  <tr>\n                    <td>Items</td>\n                    <td>a,b,c</td>\n                    <td>a,c,e</td>\n                    <td>a,c,e</td>\n                    <td>a,c,d</td>\n                    <td>b,d,f</td>\n                    <td>b,d</td>\n                    <td>b,d</td>\n                    <td>b,e</td>\n                    <td>b,e</td>\n                    <td>a,b</td>\n                  </tr>\n                </table>\n              </div>\n              <div className=\"description\">\n                  <div className=\"subcontent\">\n                    <p className=\"sideheader\">Relative Frequency of an item X is</p>\n                    <div className=\"setofpoints\">\n                      <li>Ratio of number of Transactions that contain the itex X to the total number of transactions</li>\n                    </div>\n                    <p className=\"Example\">Example from the above table : </p>\n                    <p className=\"example_cont\">Relative Frequency of an item 'a' is = (number of Transactions that contain 'a') / (Total Number of Transactions) = 5/10 = 0.5</p>\n                    \n                  </div>\n              </div>\n            </div>\n        </div>\n        <div className=\"maxor\">\n            <div className=\"side_heading\">Minimum Overlap Ratio</div>\n            <div className=\"content\">\n              <div className=\"table\">\n                <table>\n                  <tr>\n                    <th data-tip=\"Transaction Id\" data-for='toolTip1' data-place='top'>TID\n                    <ReactTooltip id=\"toolTip1\" className=\"tooltip\" /></th>\n                    <th>1</th>\n                    <th>2</th>\n                    <th>3</th>\n                    <th>4</th>\n                    <th>5</th>\n                    <th>6</th>\n                    <th>7</th>\n                    <th>8</th>\n                    <th>9</th>\n                    <th>10</th>\n                  </tr>\n                  <tr>\n                    <td>Items</td>\n                    <td>a,b,c</td>\n                    <td>a,c,e</td>\n                    <td>a,c,e</td>\n                    <td>a,c,d</td>\n                    <td>b,d,f</td>\n                    <td>b,d</td>\n                    <td>b,d</td>\n                    <td>b,e</td>\n                    <td>b,e</td>\n                    <td>a,b</td>\n                  </tr>\n                </table>\n              </div>\n              <div className=\"description\">\n                  <div className=\"subcontent\">\n                    <p className=\"sideheader\">Maximum Overlap Ratio of a pattern X = {\"{\"} w {<sup>p</sup>},w {<sup>q</sup>},......w {<sup>r</sup>} {\"}\"} {\" \"}{\"1<=p<=q<=r<=n\"} where n is the number of Transactions  and  |T(w{<sup>p</sup>})| {\">=\"} |T(w{<sup>q</sup>})| {\">=\"} .....{\">=\"} |T(w{<sup>r</sup>})| where |T(w{<sup>q</sup>})| is number of TIDs containing item w{<sup>q</sup>} is</p>\n                    <div className=\"setofpoints\">\n                      <li>If w{<sup>r</sup>}  is the last item added to X , the overlap ratio is defined as Ratio of Common Transactions in X-w{<sup>r</sup>} and w{<sup>r</sup>} to the number of Transactions containing item w{<sup>r</sup>}.</li>\n                      <li>The lesser the overlap ratio, the more will be the coverage support.</li>\n                      <li>The overlap ratio r is 0{\"<=\"}r{\"<=\"}1</li>\n                    </div>\n                    <p className=\"Example\">Example from the above table : </p>\n                    <p className=\"example_cont\">Overlap Ratio of X = {\"{ b,a}\"} is = (number of Transactions common in (b) and (a)) / (Number of Transactions containing a) = 2/5 = 0.4</p>\n                    \n                  </div>\n              </div>\n            </div>\n        </div>\n      </div>\n\n  </div>*/}\n    <div className={myContext.side ? \"terms_main_div_shrink\" : \"terms_main_div\"}>\n      <div className=\"terms_heading\">\n        <div>Terms Used</div>\n      </div>\n      <hr className=\"terms_horizontal_line\"/>\n      {/*<div className=\"terms_list_of_contents\">\n        <div>\n        {show_content ? \n          <Box className=\"terms_box1\">\n            <div className=\"dropdown_heading\">Contents [<div className=\"show_hide\" onClick={()=>set_show_content(!show_content)}>Hide</div> ] </div>\n            <div className=\"terms_list_of_contents\">\n              <div><a href=\"#def\">1. Graph Transaction</a></div>\n              <div><a href=\"#example\">2. Minimum Relative Frequency</a></div>\n              <div><a href=\"#framework\">3. Minimum Coverage Support </a></div>\n              <div><a href=\"#references\">4. Maximum Overlap Ratio</a></div>\n            </div>\n          </Box> :\n          <Box className=\"terms_box1\">\n            <div className=\"dropdown_heading\">Contents [<div className=\"show_hide\" onClick={()=>set_show_content(!show_content)}>Show</div>]</div>\n          </Box>\n        }\n      </div>\n      </div>*/}\n  </div>\n  <div className={myContext.side ? \"terms_content\" : \"terms_content_expand\"}>\n    \n    {show_terms[0]==0 ?\n    <div>\n      <Box className=\"box2\" onClick={()=>go_to_set(0)}>\n         <div className=\"box_heading\">Graph Transaction</div>\n        <div className=\"box2_icon\">\n          <FaIcons.FaPlus onClick={()=>go_to_set(0)}/>\n        </div>\n      \n      </Box>\n    </div> :\n    <>\n    <Box className=\"box2\" onClick={()=>go_to_set(0)}> \n    <div className=\"box_heading\">\n      Graph Transaction\n    </div>\n    <div className=\"box2_icon\">\n          <FaIcons.FaMinus onClick={()=>go_to_set(0)}/>\n        </div>\n    </Box>\n    <div className=\"terms_definition\">\n    <p className=\"para\">A graph transaction <i>G = ({' '}V, E, L, l{' '})</i> is a labeled,{' '}connected and undirected graph,{' '}where <i>V is a set of\nvertices</i>,{' '}<i>E ⊆ V<sub>2</sub></i> is a set of edges, <i>L</i> is a set of labels and <i>l : V ∪ E → L</i>,{' '}where <i>l</i> is a function for assigning\nlabels to vertices and edges.</p>\n        <div className=\"scp_definition\">\n        <img className=\"terms_example_image\" src={Image3}></img>\n        <div className=\"terms_image_name\">Fig. 1: (a) Sample chemical compound, (b) Equivalent graph model</div>\n        </div>\n    </div>\n    </>\n    }\n    {show_terms[1]==0 ?\n    <Box className=\"box2\" onClick={()=>go_to_set(1)}>\n    <div className=\"box_heading\">Subgraph Pattern</div>\n   <div className=\"box2_icon\">\n     <FaIcons.FaPlus onClick={()=>go_to_set(1)}/>\n   </div>\n \n </Box>:\n    <>\n    <Box className=\"box2\" onClick={()=>go_to_set(1)}>\n    <div className=\"box_heading\">\n      Subgraph Pattern\n    </div>\n    <div className=\"box2_icon\">\n          <FaIcons.FaMinus onClick={()=>go_to_set(1)}/>\n        </div>\n    </Box>\n    <div className=\"terms_definition\">\n    <p className=\"para\">Given a Graph Transactional Dataset <i>D</i> and the set <i>Ψ</i> of all possible subgraphs over <i>D</i>, a subgraph pattern <i>(SP{' '})</i> is a set\nof subgraphs belonging to <i>Ψ</i></p>\n        \n    </div>\n    </>\n    }\n    {show_terms[2]==0 ?\n    <Box className=\"box2\" onClick={()=>go_to_set(2)}>\n    <div className=\"box_heading\">Cover Set of a Subgraph</div>\n   <div className=\"box2_icon\">\n     <FaIcons.FaPlus onClick={()=>go_to_set(2)}/>\n   </div>\n \n </Box>:\n    <>\n    <Box className=\"box2\" onClick={()=>go_to_set(2)}>\n    <div className=\"box_heading\">\n      Cover Set of a Subgraph\n    </div>\n    <div className=\"box2_icon\">\n          <FaIcons.FaMinus onClick={()=>go_to_set(2)}/>\n        </div>\n    </Box>\n    <div className=\"terms_definition\">\n      <div>\n    <p className=\"para\">A subgraph <i>S<sub>j</sub></i>{' '}is said to cover graph <i>G<sub>i</sub></i> from Graph Transactional Dataset if <i>S<sub>j</sub></i> exists in <i>G<sub>i</sub></i>.{' '}</p>\n    <p className=\"para\">The Cover Set of subgraph <i>S<sub>j</sub></i> is defined as the set of all graph transactions covered by <i>S<sub>j</sub></i>.It is denoted by <i>CSet<sub>g</sub>(S<sub>j</sub>,{' '}D{' '})</i>.{' '}Formally,\n<i>CSet<sub>g</sub>(S<sub>j</sub>,{' '}D{' '}) = {\"{ G\"}<sub>i</sub> |cover(S <sub>j</sub>,{' '}G<sub>i</sub>{' '}) = 1 {\"&\"} G<sub>i</sub> ∈ D {\"}\"}</i>.\n{' '}The Cover Set of <i>SP (CSet<sub>g</sub>(SP,{' '}D{' '}))</i> is a set of all graph transactions covered by  atleast one Subgraph of <i>SP</i>.\n</p>\n          <div className=\"scp_definition_heading\" id=\"example\">\n              Example\n          </div>\n          {/*<div className=\"scp_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 1: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with minRF g =0.2</div>\n                    <p className=\"para\">Figure 1.a of above image is the Graph Transactional Dataset consisting of 10 graphs.In Figure 2(b), let SP be the set {\"{S1, S2, S3}\"}. The RF values of S1, S2, and S3 are 0.3, 0.3, and 0.2 respectively. The coverage set of SP , CSet(SP ,D)=\n                        {\"{(G1 ,G4 ,G5 ,G6 ,G7 ,G8 ,G10 }\"}.</p>\n    </div>*/}\n        </div>\n        <div className=\"scp_definition\">\n        <img className=\"terms_example_image\" src={Image4}></img>\n        <div className=\"terms_image_name\">Fig. 2: Cover</div>\n        </div>\n      </div>\n      <div className=\"terms_example_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 1: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with <i>minRF<sub>g</sub></i>{' '}={' '}0.2</div>\n                    <p className=\"para_down_example\">Figure 1.a of above image is the Graph Transactional Dataset consisting of 10 graphs.{' '}In Figure 2(b),{' '}let <i>SP</i> be the set {\"{ S1, S2, S3 }\"}. The RF values of <i>S1</i>,{' '}<i>S2</i>,{' '}and{' '}<i>S3</i> are 0.3, 0.3, and 0.2 respectively. The coverage set of <i>SP</i>,{' '}<i>CSet({' '}SP,D{' '}){' '}=\n                        {' '}{\"{( G1, G4, G5, G6, G7, G8, G10 }\"}</i>.</p>\n                </div>\n    \n    </>\n    }\n    {show_terms[3]==0 ?\n    <Box className=\"box2\" onClick={()=>go_to_set(3)}>\n    <div className=\"box_heading\">Relative Frequency of a Subgraph</div>\n   <div className=\"box2_icon\">\n     <FaIcons.FaPlus onClick={()=>go_to_set(3)}/>\n   </div>\n \n </Box>:\n    <>\n    <Box className=\"box2\" onClick={()=>go_to_set(3)}>\n    <div className=\"box_heading\">\n      Relative Frequency of a Subgraph\n    </div>\n    <div className=\"box2_icon\">\n          <FaIcons.FaMinus onClick={()=>go_to_set(3)}/>\n        </div>\n    </Box>\n    <div className=\"terms_definition\">\n      <div>\n    <p className=\"para\">Given Graph Transactional Data <i>D</i> and a subgraph <i>S<sub>j</sub></i>{' '},{' '}we denote the percentage of graph\ntransactions in <i>D</i> covered by <i>S<sub>j</sub></i> as Relative Frequency.\n Formula for computing Relative Frequency of Subgraph <i>S<sub>j</sub></i> in <i>D</i> is shown in figure 1.</p>\n    <p className=\"para\">Here,{' '}<i>0 ≤ RF<sub>g</sub>({' '}S<sub>j</sub>,{' '}D{' '}) ≤ 1</i>.{' '}We can extract subgraphs of\ninterest from <i>D</i> based on user-specified <i>minRF<sub>g</sub></i> threshold.</p>\n          <div className=\"scp_definition_heading\" id=\"example\">\n              Example\n          </div>\n         {/*<div className=\"scp_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with minRF g =0.2</div>\n                    <p className=\"para\">Consider graph transactional dataset D comprising of 10 graph transactions G<sub>1</sub> to\nG<sub>10</sub> , shown in Figure 2(a). Three subgraphs S<sub>1</sub> , S<sub>2</sub> and\nS<sub>3</sub> are shown in Figure 2(b). Here, S<sub>1</sub> is a subgraph of\nG<sub>1</sub>, G<sub>6</sub> and G<sub>10</sub> ; S<sub>2</sub> is a subgraph of G<sub>5</sub> , G<sub>7</sub> and G<sub>8</sub> ; and\nS<sub>3</sub> is a subgraph of G<sub>4</sub> and G<sub>7</sub> . The subgraph S<sub>1</sub> is said\nto cover G<sub>1</sub> since S<sub>1</sub> ⊆ G<sub>1</sub> . Hence, cover(S<sub>1</sub> , G<sub>1</sub> )=1.\nMoreover, CSet(S<sub>1</sub> , D) = {\"{G\"}<sub>1</sub> ,G <sub>6</sub> ,G <sub>10</sub> and RF<sub>g</sub> (S<sub>1</sub> , D) = |Cset(S<sub>1</sub>)|/D = 3/10 = 0.3.\n Similarly RF values of S<sub>2</sub> ,\nS<sub>3</sub> are 0.3 and 0.2 respectively</p>\n    </div>*/}\n        </div>\n        <div className=\"scp_definition\">\n        <img className=\"terms_example_image\" src={Image5}></img>\n        <div className=\"terms_image_name\">Fig. 1: Formula for Relative Frequency of Subgraph <i>S<sub>j</sub></i> in <i>D</i> </div>\n        </div>\n      </div>\n      <div className=\"terms_example_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with <i>minRF<sub>g</sub>{' '}={' '}0.2</i></div>\n                    <p className=\"para_down_example\">Consider graph transactional dataset <i>D</i> comprising of 10 graph transactions <i>G<sub>1</sub></i> to\n<i>G<sub>10</sub></i>{' '},{' '}shown in Figure 2(a).{' '}Three subgraphs <i>S<sub>1</sub></i>,{' '}<i>S<sub>2</sub></i> and\n{' '}<i>S<sub>3</sub></i> are shown in Figure 2(b). Here,{' '}<i>S<sub>1</sub></i> is a subgraph of\n{' '}<i>G<sub>1</sub></i>{' '},{' '}<i>G<sub>6</sub></i> and <i>G<sub>10</sub></i>{' '};{' '}<i>S<sub>2</sub></i> is a subgraph of <i>G<sub>5</sub></i>{' '},{' '}<i>G<sub>7</sub></i> and{' '}<i>G<sub>8</sub></i>{' '};{' '}and\n{' '}<i>S<sub>3</sub></i> is a subgraph of <i>G<sub>4</sub></i> and <i>G<sub>7</sub></i>.{' '}The subgraph <i>S<sub>1</sub></i> is said\nto cover <i>G<sub>1</sub></i> since <i>S<sub>1</sub> ⊆ G<sub>1</sub></i>.{' '}Hence,{' '}<i>cover({' '}S<sub>1</sub>,{' '}G<sub>1</sub>{' '}) = 1</i>.\n{' '}Moreover,{' '}<i>CSet({' '}S<sub>1</sub> , D) = {\"{G\"}<sub>1</sub> ,G <sub>6</sub> ,G <sub>10</sub>{\" }\"}</i> and <i>RF<sub>g</sub>(S<sub>1</sub>,{' '}D{' '}) = |Cset({' '}S<sub>1</sub>){' '}|/{' '}D = 3/10 = 0.3</i>.\n Similarly RF values of <i>S<sub>2</sub></i>,\n{' '}<i>S<sub>3</sub></i> are 0.3 and 0.2 respectively.</p>\n                </div>\n\n    \n    </>\n    }\n    {show_terms[4]==0 ?\n    <Box className=\"box2\" onClick={()=>go_to_set(4)}>\n    <div className=\"box_heading\">Coverage Support</div>\n   <div className=\"box2_icon\">\n     <FaIcons.FaPlus onClick={()=>go_to_set(4)}/>\n   </div>\n \n </Box>:\n    <>\n    <Box className=\"box2\" onClick={()=>go_to_set(4)}>\n    <div className=\"box_heading\">\n      Coverage Support\n    </div>\n    <div className=\"box2_icon\">\n          <FaIcons.FaMinus onClick={()=>go_to_set(4)}/>\n        </div>\n    </Box>\n    <div className=\"terms_definition\">\n      <div>\n    <p className=\"para\">Given Graph Transactional Dataset <i>D</i> and a subgraph pattern <i>SP</i>,{' '}the coverage support of <i>SP{' '}({' '}CS<sub>g</sub> (SP,{' '}D){' '})</i> is the percentage of graph\ntransactions in <i>D</i> covered by at least one subgraph in\n<i>SP</i>.</p>\n    <p className=\"para\">Here,{' '}<i>0 ≤ CS<sub>g</sub> (SP,{' '}D) ≤ 1</i></p>\n    <p className=\"para\"><i>CS<sub>g</sub> ({' '}SP,{' '}D) = 1{' '}</i>\nwhen all of the graph transactions in <i>D</i> are covered\nby SP.{' '}Conversely,{' '}<i>CS<sub>g</sub>({' '}SP,{' '}D) = 0</i> when none of the\ngraph transactions are covered by <i>SP</i>.{' '}A pattern <i>SP</i> is interesting with respect to coverage point of view\nif <i>CS<sub>g</sub>{' '}({' '}SP,{' '}D{' '}) ≥ minCS<sub>g</sub></i>{' '},{' '}where <i>minCS<sub>g</sub></i> is a userdefined minimum Coverage Support threshold for graph\ntransactions.</p>\n          <div className=\"scp_definition_heading\" id=\"example\">\n              Example\n          </div>\n         {/* <div className=\"scp_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with minRF g =0.2</div>\n                    <p className=\"para\">Consider graph transactional dataset D comprising of 10 graph transactions G<sub>1</sub> to\nG<sub>10</sub> , shown in Figure 2(a). Three subgraphs S<sub>1</sub> , S<sub>2</sub> and\nS<sub>3</sub> are shown in Figure 2(b). Let Subgraph Pattern SP = {\"{\"} S<sub>1</sub>,S<sub>2</sub>,<sub>3</sub> {\"}\"} .Here, S<sub>1</sub> is a subgraph of\nG<sub>1</sub>, G<sub>6</sub> and G<sub>10</sub> ; S<sub>2</sub> is a subgraph of G<sub>5</sub> , G<sub>7</sub> and G<sub>8</sub> ; and\nS<sub>3</sub> is a subgraph of G<sub>4</sub> and G<sub>7</sub> . The subgraph S<sub>1</sub> is said\nto cover G<sub>1</sub> since S<sub>1</sub> ⊆ G<sub>1</sub> . Hence, cover(S<sub>1</sub> , G<sub>1</sub> )=1.\nMoreover, |CSet(SP , D)| / |D| = |{\"{\"}G<sub>1</sub> ,G <sub>6</sub> ,G <sub>10</sub>{\"}\"} ∪ {\"{\"}G<sub>5</sub> ,G<sub>7</sub>,G <sub>8</sub> {\"}\"} ∪ {\"{\"}G<sub>4</sub> ,G <sub>7</sub>{\"}\"} | = 8 /10 = 0.8.\n </p>\n    </div>*/}\n        </div>\n        <div className=\"scp_definition\">\n        <img className=\"terms_example_image\" src={Image6}></img>\n        <div className=\"terms_image_name\">Fig. 1: Formula for Coverage Support of a Subgraph Pattern <i>SP</i> in <i>D</i> </div>\n        </div>\n      </div>\n      <div className=\"terms_example_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with <i>minRF<sub>g</sub>{' '}={' '}0.2</i></div>\n                    <p className=\"para_down_example\">Consider graph transactional dataset <i>D</i> comprising of 10 graph transactions <i>G<sub>1</sub></i> to\n<i>G<sub>10</sub></i>{' '},{' '}shown in Figure 2(a).{' '}Three subgraphs <i>S<sub>1</sub></i>,{' '}<i>S<sub>2</sub></i> and\n<i>S<sub>3</sub></i> are shown in Figure 2(b).{' '}Let Subgraph Pattern SP{' '}={' '}<i>{\"{\"} S<sub>1</sub>,{' '}S<sub>2</sub>,{' '}S<sub>3</sub> {\"}\"}</i>.{' '}Here,{' '}<i>S<sub>1</sub></i> is a subgraph of\n{' '}<i>G<sub>1</sub></i>,{' '}<i>G<sub>6</sub></i> and <i>G<sub>10</sub></i>;{' '}<i>S<sub>2</sub></i> is a subgraph of <i>G<sub>5</sub></i>{' '},{' '}<i>G<sub>7</sub></i> and <i>G<sub>8</sub></i>{' '};{' '}and\n<i>S<sub>3</sub></i> is a subgraph of <i>G<sub>4</sub></i> and <i>G<sub>7</sub></i>{' '}.{' '}The subgraph <i>S<sub>1</sub></i> is said\nto cover <i>G<sub>1</sub></i> since <i>S<sub>1</sub> ⊆ G<sub>1</sub> </i>.{' '}Hence,{' '}<i>cover({' '}S<sub>1</sub>{' '},{' '}G<sub>1</sub>{' '}){' '}={' '}1</i>.\nMoreover,<i>{' '}|{' '}CSet({' '}SP,{' '}D){' '}| / |{' '}D{' '}| = |{' '}{\"{\"}G<sub>1</sub>,{' '}G<sub>6</sub>,{' '}G<sub>10</sub>{\"}\"} ∪ {\"{\"}G<sub>5</sub>,{' '}G<sub>7</sub>,{' '}G <sub>8</sub> {\"}\"} ∪ {\"{\"}G<sub>4</sub>,{' '}G <sub>7</sub>{\"}\"}{' '}|</i> = 8 /10 = 0.8.\n </p>\n    </div>\n      \n    \n    </>\n    }\n    {show_terms[5]==0 ?\n    <Box className=\"box2\" onClick={()=>go_to_set(5)}>\n    <div className=\"box_heading\">Overlap Ratio of a Pattern X</div>\n   <div className=\"box2_icon\">\n     <FaIcons.FaPlus onClick={()=>go_to_set(5)}/>\n   </div>\n \n </Box>:\n    <>\n    <Box className=\"box2\" onClick={()=>go_to_set(5)}>\n    <div className=\"box_heading\">\n      Overlap Ratio of a Pattern X\n    </div>\n    <div className=\"box2_icon\">\n          <FaIcons.FaMinus onClick={()=>go_to_set(5)}/>\n        </div>\n    </Box>\n    <div className=\"terms_definition\">\n      <div>\n    <p className=\"para\">Let <i>X = {\"{ \"}O<sub>p</sub>{' '},{' '}O<sub>q</sub>{' '},. . . , O<sub>r</sub>{' '},{' '}O<sub>s</sub> {\" }\"}</i>{' '}be a pattern such that\n<i>RF{' '}({' '}O<sub>p</sub>{' '}){' '}≥{' '}RF{' '}({' '}O<sub>q</sub>{' '}) ≥ · · · ≥ RF{' '}({' '}O<sub>r</sub>{' '}){' '}≥{' '}RF{' '}({' '}O<sub>s</sub>{' '})</i>.{' '}({' '}Here,{' '}\nthe notations <i>O<sub>p</sub></i>{' '},{' '}<i>O<sub>q</sub></i>{' '},{' '}<i>O<sub>r</sub></i>{' '},{' '}and{' '}<i>O<sub>s</sub></i> represent Subgraph IDs{' '}).{' '}The\noverlap ratio of a pattern <i>X</i> is defined as the ratio of\nthe number of transactions common in CSet({' '}X −{' '}{\"{\"}O<sub>s</sub>{\"}\"}{' '})\nand CSet{' '}(O<sub>s</sub>) to CSet{' '}(O<sub>s</sub>).{' '}It is defined as shown in figure 1.</p>\n    <p className=\"para\">For a pattern X,{' '}0 ≤ OR(X) ≤ 1</p>\n    <p className=\"para\">A pattern X\nis interesting if OR(X) ≤ maxOR,{' '}where maxOR is\na user-defined maximum OR threshold.</p>\n          <div className=\"scp_definition_heading\" id=\"example\">\n              Example\n          </div>\n         {/* <div className=\"scp_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with minRF g =0.2</div>\n                    <p className=\"para\">Consider graph transactional dataset D comprising of 10 graph transactions G<sub>1</sub> to\nG<sub>10</sub> , shown in Figure 2(a). Three subgraphs S<sub>1</sub> , S<sub>2</sub> and\nS<sub>3</sub> are shown in Figure 2(b). Let Subgraph Pattern SP = {\"{\"} S<sub>1</sub>,S<sub>2</sub>,<sub>3</sub> {\"}\"} .Here, S<sub>1</sub> is a subgraph of\nG<sub>1</sub>, G<sub>6</sub> and G<sub>10</sub> ; S<sub>2</sub> is a subgraph of G<sub>5</sub> , G<sub>7</sub> and G<sub>8</sub> ; and\nS<sub>3</sub> is a subgraph of G<sub>4</sub> and G<sub>7</sub> . The subgraph S<sub>1</sub> is said\nto cover G<sub>1</sub> since S<sub>1</sub> ⊆ G<sub>1</sub> . Hence, cover(S<sub>1</sub> , G<sub>1</sub> )=1.\nMoreover, |CSet(SP , D)| / |D| = |{\"{\"}G<sub>1</sub> ,G <sub>6</sub> ,G <sub>10</sub>{\"}\"} ∪ {\"{\"}G<sub>5</sub> ,G<sub>7</sub>,G <sub>8</sub> {\"}\"} ∪ {\"{\"}G<sub>4</sub> ,G <sub>7</sub>{\"}\"} | = 8 /10 = 0.8.\n </p>\n</div>*/}\n        </div>\n        <div className=\"scp_definition\">\n        <img className=\"terms_example_image\" src={Image7}></img>\n        <div className=\"terms_image_name\">Fig. 1: Formula for Overlap Ratio of a pattern <i>X</i>.</div>\n        </div>\n      </div>\n      <div className=\"terms_example_definition\">\n                    <img src={Image} className=\"example_image\"></img>\n                    <div className=\"image_name\">Fig. 2: (a) Sample of 10 graph transactions, (b) Candidate subgraphs with <i>minRF<sub>g</sub></i>{' '}={' '}0.2</div>\n                    <p className=\"para_down_example\">Consider graph transactional dataset <i>D</i> comprising of 10 graph transactions <i>G<sub>1</sub></i> to\n<i>G<sub>10</sub></i>,{' '}shown in Figure 2(a).{' '}Three subgraphs <i>S<sub>1</sub></i>,{' '}<i>S<sub>2</sub></i> and\n<i>S<sub>3</sub></i> are shown in Figure 2(b).{' '}Let Subgraph Pattern <i>SP{' '}={' '}{\"{\"} S<sub>1</sub>,{' '}S<sub>2</sub>,{' '}S<sub>3</sub> {\"}\"}{' '}</i>.{' '}Here,{' '}<i>S<sub>1</sub></i> is a subgraph of\n<i>G<sub>1</sub>,{' '}G<sub>6</sub> and G<sub>10</sub>;{' '}S<sub>2</sub></i> is a subgraph of <i>G<sub>5</sub>,{' '}G<sub>7</sub> and G<sub>8</sub>{' '}</i>; and\n<i>S<sub>3</sub></i> is a subgraph of <i>G<sub>4</sub></i> and <i>G<sub>7</sub></i>.{' '}The subgraph <i>S<sub>1</sub></i> is said\nto cover <i>G<sub>1</sub></i> since <i>S<sub>1</sub> ⊆ G<sub>1</sub></i>.{' '}Hence,{' '}<i>cover({' '}S<sub>1</sub>,{' '}G<sub>1</sub>{' '}){' '}={' '}1</i>.\nMoreover, <i>|CSet({' '}SP,{' '}D{' '})| / |D| = |{\"{ \"}G<sub>1</sub>,{' '}G<sub>6</sub>,{' '}G<sub>10</sub>{\" }\"} ∪ {\"{ \"}G<sub>5</sub>,{' '}G<sub>7</sub>,{' '}G<sub>8</sub>{\" }\"} ∪ {\"{ \"}G<sub>4</sub>,{' '}G<sub>7</sub>{\" }\"} |</i> = 8 /10 = 0.8.\n </p>\n</div>\n      \n      \n    \n    </>\n    }\n  \n   \n  </div>\n  </>\n  \n  );\n}\n\nexport default Terms_used;","/home/mayakuntla/Videos/cp/src/Components/Form/Form.js",["191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284"],"import React, {useState,useContext} from 'react';\nimport './Form.css';\nimport AppContext from '../App_context';\nimport { Container } from 'reactstrap';\nimport axios from 'axios';\nimport * as FaIcons from 'react-icons/fa';\nimport { IconContext } from 'react-icons';\nimport Loader from \"react-loader-spinner\";\nimport Button from '@material-ui/core/Button';\nimport JSZip from 'jszip';\nimport JSZipUtils from 'jszip-utils';\nimport saveAs from 'save-as';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst Form=()=>{\n    const myContext = useContext(AppContext);\n   \n    const [formData, setFormData] = React.useState({mincs:'',minrf:'',maxor:'',analysistype:'1'});\n    const [frequent_subgraphs,setfrequentsubgraphs]=React.useState(false);\n    const [coverage_patterns,setcoveragepatterns]=React.useState(false);\n    const [fsg_info,setfsginfo]=React.useState([]);\n    const [fsg_number,setfsgnumber]=React.useState(0);\n    const [avg_transaction,setavgtransactions]=React.useState(0);\n    const [execution_time,setexecutiontime]=React.useState(0);\n    const [candidate_patterns_number,setcandidatepatternsnumber]=React.useState(0);\n    const [scp_number,setscpnumber]=React.useState(0);\n    const [gotdatafrombackend,setgotdatafrombackend]=React.useState(false);\n    const [supports,setsupports]=React.useState([]);\n    const [vertices,setvertices]=React.useState(0);\n    const [vertices_set,setverticesset]=React.useState([]);\n    const [edges,setedges]=React.useState(0);\n    const [edges_set,setedgesset]=React.useState([]);\n    const [display_all,setdisplayall]=React.useState(true);\n    const [selected_filters,setselectedfilters]=React.useState({support:0,vertices:0,edges:0,coverage:0});\n    const [selected_filters_coverage,setselectedfilterscoverage]=React.useState({csfrom:0,csto:0,orfrom:0,orto:0,coverage:0});\n    const [show,setshow]=React.useState(false);\n    const [selected_image_for_modal,setselectedimageformodal]=React.useState(\"\");\n    const [selected_image_name_for_modal,setselectedimagenameformodal]=React.useState(\"\");\n    const [scp_images,setscpimages]=React.useState([]);\n    const [no_of_coverages,setcoverages]=React.useState([]);\n    const [loader,setloader]=React.useState(false);\n    const [selected_file,setselectedfile]=React.useState({});\n    const [file_content,setfilecontent]=React.useState(\"\");\n    const [downloadtype,setdownloadtype]=React.useState(0);\n    const [selected_patterns,setselectedpatterns]=React.useState([]);\n    const [selected_all,setselectedall]=React.useState(false);\n    \n    const handlechange=(event)=>{\n        let nam=event.target.name;\n        let val=event.target.value;\n        console.log(val);\n        setFormData((prevState)=>{\n          return {...prevState,[nam]:val}\n        });\n    }\n\n    const variable={\n        \"mincs\":\"Minimum Coverage Support\",\n        \"minrf\":\"Minimum Relative Frequency\",\n        \"maxor\":\"Maximum Overlap Ratio\",\n        \"analysistype\":\"Analysis Type\"\n    }\n    const handle_change_type=(event)=>{\n        let nam=event.target.name;\n        let val=event.target.value;\n       \n        if(val=='0'){\n            setfrequentsubgraphs(true);\n            setcoveragepatterns(false);\n            setFormData((prevState)=>{\n                return{...prevState,[nam]:val}\n            })\n            \n        }\n        else{\n            setfrequentsubgraphs(false);\n            setcoveragepatterns(true);\n            setFormData((prevState)=>{\n                return{...prevState,[nam]:val}\n            })\n        }\n        \n    }\n\n    const handlesubmit=()=>{\n        setcoveragepatterns(true);\n        setfrequentsubgraphs(false);\n        if(formData.minrf=='' || formData.mincs=='' || formData.maxor==''){\n            let c=\"Please enter \";\n            if(formData.mincs==''){\n                c=c+\"Minimum Coverage Support \"\n            }\n            if(formData.minrf==''){\n                c=c+\"Minimum Relative Frequency \"\n            }\n            if(formData.maxor==''){\n                c=c+\"Maximum Ovelap Ratio \"\n            }\n            \n            alert(c);\n        }\n        else{\n            setgotdatafrombackend(false);\n            setloader(true);\n            const data = new FormData();\n            if(formData.analysistype=='0'){\n                data.append(\"data\",parseInt(0));\n                data.append(\"mincs\",formData.mincs);\n                data.append(\"minrf\",formData.minrf);\n                data.append(\"maxor\",formData.maxor);\n                data.append(\"analysistype\",formData.analysistype);\n                data.append(\"selected_data\",myContext.dataset);\n                data.append(\"selected_dataset\",selected_file);\n                data.append(\"file_content\",file_content);\n                console.log(myContext.dataset);\n                axios.post('http://localhost:5000/',data,{headers: {'content-type': 'multipart/form-data'}})\n                .then(resData=>resData.data)\n                .then(res=>{\n                    setfsginfo(res.image_info);\n                    setfsgnumber(res.fsubgraphs);\n                    setavgtransactions(res.avgtransactions);\n                    setexecutiontime(res.etime);\n                    setsupports(res.supports);\n                    setvertices(res.vertices);\n                    setedges(res.edges);\n                    var c=[];\n                    for(var i=2;i<=res.vertices;i++){\n                        c.push(i)\n                    }\n                    setverticesset(c);\n                    var c=[];\n                    for(var i=1;i<=res.edges;i++){\n                        c.push(i)\n                    }\n                    setedgesset(c);\n                    setloader(false);\n                    setgotdatafrombackend(true);\n\n\n                })\n            }\n            else{\n                data.append(\"data\",parseInt(0));\n                data.append(\"mincs\",formData.mincs);\n                data.append(\"minrf\",formData.minrf);\n                data.append(\"maxor\",formData.maxor);\n                data.append(\"analysistype\",formData.analysistype);\n                data.append(\"selected_data\",myContext.dataset);\n                data.append(\"selected_dataset\",selected_file);\n                data.append(\"file_content\",file_content);\n                axios.post('http://localhost:5000/',data,{headers: {'content-type': 'multipart/form-data'}})\n                .then(resData=>resData.data)\n                .then(res=>{\n                    setfsginfo(res.image_info);\n                    setfsgnumber(res.fsubgraphs);\n                    setavgtransactions(res.avgtransactions);\n                    setscpimages(res.coverage_patterns);\n                    setsupports(res.supports);\n                    setvertices(res.vertices);\n                    setedges(res.edges);\n                    var c=[];\n                    for(var i=2;i<=res.vertices;i++){\n                        c.push(i)\n                    }\n                    setverticesset(c);\n                    var c=[];\n                    for(var i=1;i<=res.edges;i++){\n                        c.push(i)\n                    }\n                    setedgesset(c);\n                    var c=res.no_of_coverages\n                    var s=[]\n                    for(var i=1;i<=c;i++){\n                        s.push(i)\n                    }\n                    setcoverages(s);\n                    console.log(\"scp_images_length\");\n                    console.log(res.coverage_patterns.length);\n                    let v=[];\n                    for(var i=0;i<res.coverage_patterns.length;i++)\n                    {\n                        let w=[];\n                        for(var j=0;j<res.coverage_patterns[i].image_info.length;j++){\n                            w.push(0);\n                        }\n                        console.log(\"w\");\n                        console.log(w);\n                        v.push(w);\n                    }\n                    console.log(\"v\");\n                    console.log(v);\n                    setselectedpatterns(v);\n                    console.log(\"Selected_patters\");\n                    console.log(selected_patterns);\n                    setloader(false);\n                    setgotdatafrombackend(true);\n                    setselectedfilterscoverage((prevState)=>{\n                        return{...prevState,[\"coverage\"]:0}\n                    })\n                    setselectedfilterscoverage((prevState)=>{\n                        return{...prevState,[\"csfrom\"]:formData.mincs}\n                    });\n                    setselectedfilterscoverage((prevState)=>{\n                        return{...prevState,[\"csto\"]:1}\n                    });\n                    setselectedfilterscoverage((prevState)=>{\n                        return{...prevState,[\"orfrom\"]:0}\n                    });\n                    setselectedfilterscoverage((prevState)=>{\n                        return{...prevState,[\"orto\"]:formData.maxor}\n                    });\n                    setcandidatepatternsnumber(res.number_of_candidate_patterns);\n                    setscpnumber(res.number_of_scps);\n                    setexecutiontime(res.execution_time);\n                    \n\n                })\n\n            }\n\n        }\n    }\n\n    const change_filter=(e)=>{\n        let nam=e.target.name;\n        let val=e.target.value;\n        console.log(nam);\n        console.log(val);\n        if(val==\"all\"){\n            console.log(\"all\");\n            setselectedfilters((prevState)=>{\n                return {...prevState,[nam]:0}\n            });\n        }\n        else{\n            console.log(\"otherthen\");\n            setselectedfilters((prevState)=>{\n                return {...prevState,[nam]:val}\n            });\n\n        }\n       \n\n\n\n    }\n    const handlefileupload=(e)=>{\n        console.log(\"file\");\n        let file=e.target.files[0];\n        console.log(e.target.files[0]);\n        var reader = new FileReader();\n        reader.readAsDataURL(file)\n        let r=\"\"\n        reader.onload=(e)=>{\n            console.log(e.target.result);\n            let r=e.target.result;\n            setfilecontent(r);\n            setselectedfile(file['name']);        \n        }\n        \n        \n    }\n\n    const change_filter_coverage=(e)=>{\n        let nam=e.target.name;\n        let val=e.target.value;\n        console.log(\"function\");\n        console.log(nam);\n        console.log(val);\n        if(val=='all'){\n            setselectedfilterscoverage((prevState)=>{\n                return {...prevState,[\"coverage\"]:0}\n            })\n        }\n        else{\n        setselectedfilterscoverage((prevState)=>{\n            return {...prevState,[nam]:val}\n        })}\n    }\n    const show_modal=()=>{\n        console.log(\"hiiiiiii\");\n        setshow(true);\n    }\n\n    const handle_click_show_modal=(image,name)=>{\n        console.log('dfdf');\n        setshow(true);\n        setselectedimageformodal(image);\n        setselectedimagenameformodal(\"Graph-id : \"+name);\n\n    }\n\n    const handleClose=()=>{\n        setshow(false);\n    }\n\nconst handleclickleft=(ind)=>{\n    console.log(\"clicked\");\n\n\n\n\tdocument.getElementById('slider'+(ind.toString())).scrollLeft -= 75;\n\n}\n\nconst handleclickright=(ind)=>{\n\tdocument.getElementById('slider'+(ind.toString())).scrollLeft += 75;\n}\n\nconst downloadfiles=(e)=>{\n    console.log(\"wentinto_downloadfiles\");\n    if(frequent_subgraphs){\n        var zip = new JSZip();\n        var img = zip.folder(\"images\");\n        for(var i=0;i<fsg_info.length;i++){\n            img.file((i+1)+\".png\", fsg_info[i].image_src, {base64: true});\n        }\n        zip.generateAsync({type:\"blob\"})\n        .then(function(content) {\n            // see FileSaver.js\n            saveAs(content, \"example.zip\");\n        });\n    }\n    else if(coverage_patterns){\n        var zip = new JSZip();\n        var img = zip.folder(\"images\");\n        for(var i=0;i<scp_images.length;i++)\n        {\n            for(var j=0;j<scp_images[i].image_info.length;j++){\n                if(selected_patterns[i][j]==1)\n                    img.file(\"coverage_\"+(i+1)+\"image_\"+(j+1)+\".png\",scp_images[i].image_info[j].image_src,{base64:true});\n            }\n        }\n        zip.generateAsync({type:\"blob\"})\n        .then(function(content) {\n            // see FileSaver.js\n            saveAs(content, \"example.zip\");\n        });\n    }\n}\nconst selected_file_all=()=>{\n    if(selected_all==true){\n        setselectedall(false);\n        var p=[...selected_patterns];\n        for(var i=0;i<scp_images.length;i++)\n        {\n            for(var j=0;j<scp_images[i].image_info.length;j++)\n            {\n                \n                    p[i][j]=0;\n                    setselectedpatterns(p);\n                    p=[...selected_patterns];\n\n                \n            }\n        }\n        \n    }\n    else{\n        setselectedall(true);\n        var p=[...selected_patterns];\n        for(var i=0;i<scp_images.length;i++)\n        {\n            for(var j=0;j<scp_images[i].image_info.length;j++){\n             \n                  p[i][j]=1;\n                  setselectedpatterns(p);\n                  p=[...selected_patterns];\n              \n            }\n        }\n    }\n    console.log(\"sele\",selected_all);\n    \n   \n    \n    console.log(\"hi\");\n    console.log(\"hi\");\n    setdownloadtype(downloadtype);\n}\nconst downloadset=()=>{\n    console.log(\"cametoset\");\n    setdownloadtype(!downloadtype);\n}\nconst select_specific=(ind,ind1)=>{\n    if(selected_all==true){\n    setselectedall(false);\n    var d=document.getElementById(\"all_checked\");\n    if(d.checked== true){\n        d.checked=false;\n    }}\n    var p=[...selected_patterns];\n    p[ind][ind1]=!p[ind][ind1];\n    setselectedpatterns(p);\n    console.log(selected_patterns);\n}\n\n    return(\n        <div className={myContext.side ? \"main_div_shrink\" : \"main_div\"}>\n            <IconContext.Provider value={{ color: 'white' }}>\n\n            <div className=\"div_with_formand_filters\">\n                <div className=\"input_form\">\n                    <div className=\"form_heading\">\n                        <div className=\"form_title\">\n                            Form\n                        </div>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Minimum Relative Frequency</h6>\n                                <input type=\"text\" placeholder=\"Enter a number between 0 and 1\" value={formData.minrf} name =\"minrf\" className=\"input\" onChange={handlechange}/>\n                            </div>\n                        </Container>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Minimum Coverage Support</h6>\n                                <input type=\"text\" placeholder=\"Enter a number between 0 and 1\" value={formData.mincs} name =\"mincs\" onChange={handlechange} className=\"input\"/>\n                            </div>\n                        </Container>\n                    </div>\n                \n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Maximum Overlap Ratio</h6>\n                                <input type=\"text\" placeholder=\"Enter a number between 0 and 1\" name =\"maxor\" value={formData.maxor} onChange={handlechange} className=\"input\"/>\n                            </div>\n                        </Container>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\">Upload Dataset</h6>\n                                <input accept=\".txt\" required /*style={{ display: 'none' }}*/ id=\"contained-button-file\" onChange={handlefileupload} className=\"input\" multiple type=\"file\"/>\n\n                            </div>\n                        </Container>\n                    </div>\n                    \n                    {/*<div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"buttons_for_type\">\n                           \n                                <button className={frequent_subgraphs?\"button_for_type_selected\" : \"button_for_type\"} name=\"analysistype\" value=\"0\" onClick={handle_change_type}>Frequent Subgraphs</button>\n                                <button className={coverage_patterns ? \"button_for_type_selected\" : \"button_for_type\"} name=\"analysistype\" value=\"1\" onClick={handle_change_type}>Coverage Patterns</button>\n                            </div>\n                        </Container>\n                    </div>*/}\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"buttons_for_type\">\n                                <button className=\"button_for_submit\" onClick={handlesubmit}>Extract Coverage Patterns</button>\n                            </div>\n                        </Container>\n                    </div>\n                    {gotdatafrombackend?<div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"buttons_for_type\">\n                           \n                                <button className={frequent_subgraphs?\"button_for_type_selected\" : \"button_for_type\"} name=\"analysistype\" value=\"0\" onClick={handle_change_type}>Frequent Subgraphs</button>\n                                <button className={coverage_patterns ? \"button_for_type_selected\" : \"button_for_type\"} name=\"analysistype\" value=\"1\" onClick={handle_change_type}>Coverage Patterns</button>\n                            </div>\n                        </Container>\n                    </div>:<div></div>}\n                    \n                </div>\n                <div className={gotdatafrombackend & frequent_subgraphs ? \"fsgstats\" : \"display_none\"}>\n                <div className=\"filters_fsg\">\n                    <div className=\"filter_heading\">\n                        <div className=\"form_title\">\n                            Filters\n                        </div>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Support</h6>\n                                <select className=\"support\" name=\"support\" onChange={change_filter}>\n                                    <option value=\"all\" name=\"support\" >All</option>\n                                {supports.map((item1, index1) => {\n                                            return (\n                                                <option  name=\"supprt\" value={item1} >{item1}</option>\n                                            );\n                                        })}\n                                </select>\n                            </div>\n                        </Container>\n                    </div>\n                \n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Edges</h6>\n                                <select className=\"support\" name=\"edges\" onChange={change_filter}>\n                                    <option  value=\"all\" name=\"edges\">All</option>\n\n                                    {edges_set.map((item1, index1) => {\n                                            return (\n                                                <option value={item1} name=\"edges\" >{item1}</option>\n                                            );\n                                    })}\n                                </select>\n                            </div>\n                        </Container>\n                    </div>\n                </div>\n                <div className=\"stats\">\n                    <div className=\"filter_heading\">\n                        <div className=\"form_title\">\n                            Statistics\n                        </div>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Average Size of a Transaction</h6>\n                                <h6 className=\"from\">{avg_transaction}</h6>\n                            </div>\n                        </Container>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\">Execution Time</h6>\n                                <h6 className=\"from\">{execution_time+\" sec\"}</h6>\n                            </div>\n                        </Container>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\">Number of Frequent Subgraphs</h6>\n                                <h6 className=\"from\">{fsg_number}</h6>\n                            </div>\n                        </Container>\n                    </div>\n                </div>\n                \n                </div>\n            <div className={gotdatafrombackend & coverage_patterns ? \"cpstats\" : \"display_none\"}>\n                <div className=\"filters_coverage\">\n                    <div className=\"filter_heading\">\n                        <div className=\"form_title\">\n                            Filters\n                        </div>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Coverage Patterns</h6>\n                                <select className=\"support\" name=\"coverage\" onChange={change_filter_coverage}>\n                                    <option value=\"all\" name=\"support\" >All</option>\n                                {no_of_coverages.map((item1, index1) => {\n                                            return (\n                                                <option  name=\"support\" value={item1} >{item1}</option>\n                                            );\n                                        })}\n                                </select>\n                            </div>\n                        </Container>\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Coverage Support</h6>\n                                <div className=\"support1\" name=\"coverage\" onChange={change_filter_coverage}>\n                                    <h6 className=\"from\">from</h6>\n                                    <input type=\"text\" placeholder=\"Enter a number between 0 and 1\" name =\"csfrom\" value={selected_filters_coverage.csfrom} onChange={change_filter_coverage} className=\"fromto\"/>\n                                    <h6 className=\"from\">to</h6>\n                                    <input type=\"text\" placeholder=\"Enter a number between 0 and 1\" name =\"csto\" value={selected_filters_coverage.csto} onChange={change_filter_coverage} className=\"fromto\"/>\n\n                                </div>\n\n                                \n                            </div>\n                        </Container>\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Overlap Ratio</h6>\n                                <div className=\"support1\" name=\"coverage\" onChange={change_filter}>\n                                    <h6 className=\"from\">from</h6>\n                                    <input type=\"text\" placeholder=\"Enter a number between 0 and 1\" name =\"orfrom\" value={selected_filters_coverage.orfrom} onChange={change_filter_coverage} className=\"fromto\"/>\n                                    <h6 className=\"from\">to</h6>\n                                    <input type=\"text\" placeholder=\"Enter a number between 0 and 1\" name =\"orto\" value={selected_filters_coverage.orto} onChange={change_filter_coverage} className=\"fromto\"/>\n\n                                </div>\n\n                                \n                            </div>\n                        </Container>\n                        \n                    </div>\n                    \n                </div>\n                <div className=\"stats\">\n                    <div className=\"filter_heading\">\n                        <div className=\"form_title\">\n                            Statistics\n                        </div>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\"> Execution Time</h6>\n                                <h6 className=\"from\">{execution_time+\" sec\"}</h6>\n\n                                \n                            </div>\n                        </Container>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\">Number of Candidate Patterns</h6>\n                                <h6 className=\"from\">{candidate_patterns_number}</h6>\n\n                                \n                            </div>\n                        </Container>\n                    </div>\n                    <div className=\"form_body_main_div\">\n                        <Container className=\"Container\">\n                            <div className=\"entries_description\">\n                                <h6 className=\"entries_name\">Number of Scps</h6>\n                                <h6 className=\"from\">{scp_number}</h6>\n\n                                \n                            </div>\n                        </Container>\n                    </div>\n                </div>\n\n\n                \n            </div>\n                \n\n\n            </div>\n\n            {!gotdatafrombackend & loader ? <Loader type=\"TailSpin\"\n        color=\"rgb(17, 17, 109)\"\n        height={250}\n        width={350}\n    \n        className=\"loader\">Data Loading</Loader> :<> <div className={gotdatafrombackend & frequent_subgraphs  ? \"table\" : \"display_none\"}>\n                    <div className=\"table1\">\n                        <table className=\"images_in_table\" cellSpacing=\"0\" role=\"grid\">\n                            <thead>\n                                <tr role=\"row\">\n                                    <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='150px' className=\"table_head\">Support</th>\n                                    <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='1094px' className=\"table_head\">Frequent Subgraphs \n</th>\n\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {supports.map((item,index)=>{\n                                    \n                                    if(selected_filters.support==0 && selected_filters.vertices==0 && selected_filters.edges==0){\n                                        console.log(\"frequent\");\n                                        return(\n                                            \n                                        <tr  role=\"row\">\n                                            <td className=\"freq\">\n                                                <div >{item}</div>\n                                            </td>\n                                            <td>\n                                                <div className=\"graphs_display\">\n                                                    {fsg_info.map((item1,index1)=>{\n                                                        if(item1.support==item){\n                                                            return(\n                                                                <div onClick={()=>{handle_click_show_modal(item1.image_src,item1.image_name)}}>\n                                                                    <div>\n                                                                    {/*<div className=\"image_support_heading\">Support {item}</div>*/}\n                                                                    <img src={`data:image/png;base64,${item1.image_src}`} className=\"image1\"></img>\n                                                                    </div>\n                                                                </div>\n                                                            );\n                                                        }\n                                                    })}\n                                                </div>\n                                                <div className={show ? \"modal\" : \"display_none\"}>\n                                                    <div className=\"modal-content\">\n                                                    <Button variant=\"contained\" className=\"downloadoption\" href={`data:image/png;base64,${selected_image_for_modal}`} target=\"_blank\" download={selected_image_name_for_modal}>Download</Button>\n\n                                                        <span className=\"close\" onClick={handleClose}>&times;</span>\n                                                        <div className=\"modal_head\">{selected_image_name_for_modal}</div>\n\n\n                                                        <img src={`data:image/png;base64,${selected_image_for_modal}`} className=\"modal_image\"></img>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                            \n                                            \n                                            \n\n                                        </tr>\n                                        );\n                                        \n                                    }\n                                    else if(selected_filters.support==0 && selected_filters.vertices==0 && selected_filters.edges!=0){\n                                        return(\n                                            <tr  role=\"row\">\n                                            <td className=\"freq\">\n                                                <div >{item}</div>\n                                            </td>\n                                            <td>\n                                                <div className=\"graphs_display2\">\n                                                    {fsg_info.map((item1,index1)=>{\n                                                        if(item1.support==item && item1.edges==parseInt(selected_filters.edges)){\n                                                            return(\n                                                            <div onClick={()=>{handle_click_show_modal(item1.image_src)}}>\n                                                                <img src={`data:image/png;base64,${item1.image_src}`} className=\"image1\"></img>\n                                                            </div>\n                                                            );\n                                                        }\n                                                    })}\n                                                </div>\n                                                <div className={show ? \"modal\" : \"display_none\"}>\n                                                    <div className=\"modal-content\">\n                                                    <Button variant=\"contained\" className=\"downloadoption\" href={`data:image/png;base64,${selected_image_for_modal}`} target=\"_blank\" download={selected_image_name_for_modal}>Download</Button>\n\n                                                        <span className=\"close\" onClick={handleClose}>&times;</span>\n                                                        <img src={`data:image/png;base64,${selected_image_for_modal}`} className=\"modal_image\"></img>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                            \n                                            \n\n                                        </tr>\n                                        \n                                        );\n                                    }\n                                    \n                                    else if(selected_filters.support!=0 && selected_filters.vertices==0 && selected_filters.edges==0 && item==selected_filters.support){\n                                        return(\n                                            <tr  role=\"row\">\n                                            <td className=\"freq\">\n                                                <div className={item==parseInt(selected_filters.support) ? \"class\" : \"display_none\"}>{item}</div>\n\n                                            </td>\n                                            <td>\n                                                <div className=\"graphs_display2\">\n                                                    {fsg_info.map((item1,index1)=>{\n                                                        if(item1.support==parseInt(selected_filters.support)){\n                                                            console.log(\"1 0 0\");\n                                                            console.log(item1.support);\n                                                            console.log(item1.vertices);\n                                                            return(\n                                                            <div onClick={()=>{handle_click_show_modal(item1.image_src)}}>\n                                                            <img src={`data:image/png;base64,${item1.image_src}`} className=\"image1\"></img>\n                                                            </div>);\n                                                        }\n                                                    })}\n                                                </div>\n                                                <div className={show ? \"modal\" : \"display_none\"}>\n                                                    <div className=\"modal-content\">\n                                                    <Button variant=\"contained\" className=\"downloadoption\" href={`data:image/png;base64,${selected_image_for_modal}`} target=\"_blank\" download={selected_image_name_for_modal}>Download</Button>\n\n                                                        <span className=\"close\" onClick={handleClose}>&times;</span>\n                                                        <img src={`data:image/png;base64,${selected_image_for_modal}`} className=\"modal_image\"></img>\n                                                    </div>\n                                                </div>\n                                            </td>\n                                            \n                                            \n\n                                        </tr>\n                                        );\n                                    }\n                                    \n                                    else if(selected_filters.support!=0 && selected_filters.vertices==0 && selected_filters.edges!=0 && item==selected_filters.support){\n                                        \n                                        return(\n                                        \n                                        <tr  role=\"row\">\n                                            \n                                            <td className=\"freq\">\n                                                \n                                                <div className={item==selected_filters.support ? \"class\" : \"display_none\"}>{item}</div>\n                                            </td>\n                                    \n                                          <td>\n                                                <div className=\"graphs_display2\">\n                                                    {fsg_info.map((item1,index1)=>{\n                                                        if(item1.support==selected_filters.support && item1.support==item && item1.edges==parseInt(selected_filters.edges)){\n                                                            return(\n                                                            <div onClick={()=>{handle_click_show_modal(item1.image_src)}}>\n                                                                <img src={`data:image/png;base64,${item1.image_src}`} className=\"image\"></img>\n                                                            </div>\n                                                            );\n                                                        }\n                                                    })}\n                                                </div>\n                                                <div className={show ? \"modal\" : \"display_none\"}>\n                                                    <div className=\"modal-content\">\n                                                    <Button variant=\"contained\" className=\"downloadoption\" href={`data:image/png;base64,${selected_image_for_modal}`} target=\"_blank\" download={selected_image_name_for_modal}>Download</Button>\n\n                                                        <span className=\"close\" onClick={handleClose}>&times;</span>\n                                                        <img src={`data:image/png;base64,${selected_image_for_modal}`} className=\"modal_image\"></img>\n                                                    </div>\n                                                </div>\n                                                </td>\n                                            \n                                            \n\n                                                </tr>\n                                        );\n                                        \n                                    }\n                                    \n                                    \n                                   \n                                })}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n                \n                <div className={gotdatafrombackend & coverage_patterns ? \"table\" : \"display_none\"}>\n                    <div className=\"table1\">\n                        <table className=\"images_in_table\" cellSpacing=\"0\" role=\"grid\">\n                            <thead>\n                                <tr role=\"row\">\n                                   {/* <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='150px' className=\"table_head\">Pattern ID</th>\n                                    <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='150px' className=\"table_head\">Coverage Support</th>\n                                    <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='150px' className=\"table_head\">Overlap Ratio</th>\n                                    <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='150px' className=\"table_head\">Coverage</th>\n                                    <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='1094px' className=\"table_head\">Coverage Patterns <h6 className=\"downloadtext\" onClick={downloadfiles}>Download</h6></th>\n                                    */}\n                                    <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='150px' height='2px' className=\"table_head\">SCP Details</th>\n                                    <th rowSpan=\"1\" colSpan=\"1\" tabIndex=\"0\" aria-controls=\"groupDetails\" width='150px' height='2px' className=\"table_head\">\n                                        {downloadtype==0 ? \n                                        <div >\n                                            Subgraph Coverage Pattern\n                                            <div className=\"downloadtext\" /*onClick={downloadfiles} */onClick={downloadset}>\n                                            Download\n                                        </div>\n                                        </div>:\n                                        <label className=\"table_head\">\n                                            <input id=\"all_checked\" type=\"checkbox\"  onChange={selected_file_all}>\n\n                                            </input>\n                                                Subgraph Coverage Pattern\n                                                <h6 className=\"downloadtext\" onClick={downloadfiles}>\n                                            <FaIcons.FaDownload className=\"download_icon\"/>\n                                        </h6>\n                                        </label>\n                                        } \n                                       \n                                    </th>\n                                </tr>\n                                \n                            </thead>\n                            <tbody>\n                                \n                                {scp_images.map((item,index)=>{\n                                    console.log(\"jkjkjkj\");\n                                    console.log(selected_filters_coverage.coverage);\n                                    if(selected_filters_coverage.coverage==0){\n                                       console.log(\"selected_foiteres\");\n                                        return(\n                                        <>\n                                        \n                                        {item.image_info.map((item1,index1)=>{\n                                            console.log(\"hiiiii\");\n                                            console.log(item1.cs>=selected_filters_coverage.csfrom);\n                                            console.log(item1.cs<=selected_filters_coverage.csto);\n                                            console.log(item1.or>=selected_filters_coverage.orfrom);\n                                            console.log(item1.or<=selected_filters_coverage.orto);\n                                            if(item1.cs>=selected_filters_coverage.csfrom && item1.cs<=selected_filters_coverage.csto && item1.or>=selected_filters_coverage.orfrom && item1.or<=selected_filters_coverage.orto){\n                                                \n                                            return(\n                                                \n                                                <tr role=\"row\">\n                                                    {/*<td className=\"freq\">\n                                                        {item1.pattern_id}\n                                                    </td>\n                                                    <td className=\"freq\">\n                                                        {item1.cs}\n                                                    </td>\n                                                    <td className=\"freq\">\n                                                        {item1.or}\n                                                    </td>\n                                                    <td className=\"freq\">\n                                                        {item.coverage}\n                                                    </td>*/}\n                                                    <td className=\"freq\">\n                                                        <p><div className=\"scp_details\">\n                                                            <div className=\"detail_text\">Scp Id</div><div className=\"detail_value\">:</div><div className=\"detail_value\">{item1.pattern_id}</div>\n                                                        </div>\n                                                        <div className=\"scp_details\">\n                                                            <div className=\"detail_text\">Coverage Support</div><div className=\"detail_value\">:</div><div className=\"detail_value\">{item1.cs}</div>\n                                                        </div>\n                                                        <div className=\"scp_details\">\n                                                            <div className=\"detail_text\">Overlap Ratio</div><div className=\"detail_value\">:</div><div className=\"detail_value\">{item1.or}</div>\n                                                        </div>\n                                                        <div className=\"scp_details\">\n                                                            <div className=\"detail_text\">Size of Coverage</div><div className=\"detail_value\">:</div><div className=\"detail_value\">{item.coverage}</div>\n                                                        </div></p>\n                                                        \n                                                    </td>\n                                                    <td className=\"image_table_data\">\n                                                    <div>{downloadtype==1 ? <label><input type=\"checkbox\"  checked={selected_patterns[index][index1]} onChange={()=>{select_specific(index,index1)}}/><pre className=\"tab1\">  </pre></label> : <div></div>}<img class=\"thumbnail\" src={`data:image/png;base64,${item1.image_src}`}></img></div>\n\n                                                        \n                                                    </td>\n                                                </tr>\n                                            );}\n                                        })}\n                                        </>);\n                                       \n                                    }\n                                    else {\n\n                                       /* return(\n                                            <tr role=\"row\">\n                                                <td className=\"freq\">{item.coverage}</td>\n                                                <td>\n                                                    <div className=\"graphs_display1\">\n                                                    {item.image_src.map((item1,index1)=>{\n                                                        return(\n                                                        <div>\n                                                        <img src={`data:image/png;base64,${item1}`} className=\"image1\" ></img>\n                                                        </div>);\n                                                    })}\n                                                    </div>\n                                                </td>\n                                                </tr>\n\n\n                                                \n                                            \n                                        );*/\n\n                                        return(\n                                            <>\n                                            \n                                            {item.image_info.map((item1,index1)=>{\n                                                console.log(\"inelse\");\n                                                console.log(item.coverage==selected_filters_coverage.coverage,(item.coverage));\n                                                if(item.coverage==selected_filters_coverage.coverage && item1.cs>=selected_filters_coverage.csfrom && item1.cs<=selected_filters_coverage.csto && item1.or>=selected_filters_coverage.orfrom && item1.or<=selected_filters_coverage.orto){\n                                                return(\n                                                    \n                                                    <tr role=\"row\">\n                                                        <td className=\"freq\">\n                                                            {item1.pattern_id}\n                                                        </td>\n                                                        <td className=\"freq\">\n                                                            {item1.cs}\n                                                        </td>\n                                                        <td className=\"freq\">\n                                                            {item1.or}\n                                                        </td>\n                                                        <td className=\"freq\">\n                                                            {item.coverage}\n                                                        </td>\n                                                        <td >\n                                                        <img class=\"thumbnail\" src={`data:image/png;base64,${item1.image_src}`}></img>\n    \n                                                        </td>\n                                                    </tr>\n                                                );}\n                                            })}\n                                            </>);\n                                           \n                                    }\n                                })}\n\n                            </tbody>\n                        </table>\n                    </div>\n                </div></>}\n        </IconContext.Provider>     \n        </div>\n\n\n\n        \n    );\n}\nexport default Form;","/home/mayakuntla/Videos/cp/src/Components/Files/Files.js",["285","286","287"],"import React from 'react';\nimport  Image from '../../Images/DSAC.jpeg';\nimport * as FaIcons from 'react-icons/fa';\nimport './Files.css';\nconst Files=()=>{\n    const handlebuttonclick=()=>{\n        var fileDownload = require('js-file-download');\nfileDownload('./Files.css', 'filename.csv');\n    }\nreturn(\n    <div className=\"downloaddiv\">\n        <table className=\"tableinfiles\">\n            <th className=\"tableheader\">File</th>\n            <th className=\"tableheader\">Description</th>\n            <th className=\"tableheader\">Download Link</th>\n            <tr role=\"row\">\n                <td>Source Code</td>\n                <td>File to extract Frequent Subgraphs and Coverage Patterns</td>\n                <a href={`${process.env.PUBLIC_URL}/FSG_SCP.zip`} target='_blank' download className=\"filedownload\"><FaIcons.FaDownload/></a>\n\n            </tr>\n        </table>\n    </div>\n)\n}\nexport default Files;","/home/mayakuntla/Videos/cp/src/Components/Contact/Contact.js",["288"],"import React,{useContext} from 'react';\nimport './Contact.css';\nimport Image from '../../Images/PKrishnaReddy.jpg';\nimport * as IoIcons from 'react-icons/io';\nimport { IconContext } from 'react-icons';\nimport AppContext from '../App_context';\n\n\n\nconst Contact=()=>{\n    const myContext = useContext(AppContext);\n\n    return(\n        <div className={myContext.side?\"allcontacts\":\"allcontacts_expand\"}>\n                    <IconContext.Provider value={{ color: 'navy' }}>\n\n        <div className=\"contactdiv\">\n            <div className=\"prof\">\n            {/*<img src={Image} className=\"cardimage\"></img>*/}\n            <div className=\"about\">\n                <h3 className=\"contactname\">P.{' '}Krishna Reddy</h3>\n                <div>\n                <div className=\"boldtext\">Professor</div>\n                <div className=\"boldtext\">Ph.D ({' '}JNU{' '},{' '}New Delhi)</div>\n                </div>\n                <div className=\"side\">\n                    <div className=\"boldtext\">Research Areas</div>\n                    <p className=\"paragraph\">Data mining,{' '}data management,{' '}transaction models,{' '}distributed computing,{' '}performance evaluation,{' '}and information technology for agriculture</p>\n                </div>\n                <div className=\"mail\">\n\n                    <IoIcons.IoIosMail/>\n                    <div className=\"boldtext\">Email:</div>\n                    <p className=\"paragraph\">{' '}pkreddy@iiit.ac.in </p>\n                </div>\n                <div className=\"side\">\n                    <div className=\"boldtext\">Address:</div>\n                    <p className=\"paragraph\">International Institute of Information Technology</p>\n                    <p className=\"paragraph\">Gachibowli</p>\n                    <p className=\"paragraph\">Hyderabad - 500 032</p>\n                    <p className=\"paragraph\">India </p>\n                    <p></p>\n                </div>\n                <div className=\"side\">\n                    <div className=\"boldtext\">Phone:</div>\n                    <p className=\"paragraph\">{' '}(91) (40) 6653 1000 Ext: 1132</p>\n                    \n                </div>\n\n            </div>\n            </div>\n        </div>\n        <div className=\"students\">\n            <h2>Students</h2>\n        </div>\n        <div className=\"contactdiv\">\n            <div className=\"allstudents\" style={{marginTop:\"0ch\"}}>\n            <div className=\"prof\">\n                <div className=\"about\">\n                    <h4 className=\"contactname\">\n                        A.{' '}Srinivas Reddy\n                    </h4>\n                    <div>\n                        <div className=\"boldtext\">Ph.D Student</div>\n                        <div className=\"mail\">\n                            <IoIcons.IoIosMail/>\n                            <div className=\"boldtext\">Email:</div>\n                            <p className=\"paragraph\">{' '}srinivas.annappalli@research.iiit.ac.in </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n            <div className=\"allstudents\" >\n            <div className=\"prof\">\n                <div className=\"about\">\n                    <h4 className=\"contactname\">\n                        Yashwanth Balivada\n                    </h4>\n                    <div>\n                        <div className=\"boldtext\">B-tech CSE (IIIT Hyderabad)</div>\n                        <div className=\"mail\">\n                            <IoIcons.IoIosMail/>\n                            <div className=\"boldtext\">Email:</div>\n                            <p className=\"paragraph\">{' '}yashwanth.balivada@students.iiit.ac.in </p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n            <div className=\"allstudents\" >\n            <div className=\"prof\">\n                <div className=\"about\">\n                    <h4 className=\"contactname\">\n                        Pullamma Mayakuntla\n                    </h4>\n                    <div>\n                        <div className=\"boldtext\">B-tech CSE (IIIT Hyderabad)</div>\n                        <div className=\"mail\">\n                            <IoIcons.IoIosMail/>\n                            <div className=\"boldtext\">Email:</div>\n                            <p className=\"paragraph\">{' '}pullamma.mayakuntla@students.iiit.ac.in</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            </div>\n        </div>\n        </IconContext.Provider>\n\n        </div>\n    )\n}\nexport default Contact;","/home/mayakuntla/Videos/cp/src/history.js",[],"/home/mayakuntla/Videos/cp/src/Components/Navbar/SidebarData.js",["289"],"import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SidebarData = [\n  {\n    title: 'Tutorial',\n    path: '/',\n    icon: <FaIcons.FaChalkboardTeacher />,\n    cName: 'nav-text',\n    subNav: [\n      {\n        title: 'Terms Used',\n        path: '/terms_used',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Guidelines',\n        path: '/guidelines',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  },\n  {\n    title: 'Dataset Format',\n    path: '/datasets',\n    icon: <FaIcons.FaDatabase />,\n    cName: 'nav-text',\n    \n    \n  },\n  {\n    title: 'Extract SCPs',\n    path: '/form',\n    icon: <IoIcons.IoIosPaper/>,\n    cName: 'nav-text',\n    \n  },\n  {\n    title: 'Source Code',\n    path: '/files',\n    icon: <IoIcons.IoIosFolder/>,\n    cName: 'nav-text',\n    \n  },\n  {\n    title: 'Contact',\n    path: '/contact',\n\n    icon: <IoIcons.IoIosContact/>,\n\n    cName: 'nav-text',\n    \n  },\n  \n /* {\n    title: 'Team',\n    path: '/team',\n    icon: <IoIcons.IoMdPeople />,\n    cName: 'nav-text',\n    subNav: [\n      {\n        title: 'Users',\n        path: '/overview/users',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Revenue',\n        path: '/overview/revenue',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  },\n  {\n    title: 'Messages',\n    path: '/messages',\n    icon: <FaIcons.FaEnvelopeOpenText />,\n    cName: 'nav-text',\n    subNav: [\n      {\n        title: 'Users',\n        path: '/overview/users',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Revenue',\n        path: '/overview/revenue',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  },\n  {\n    title: 'Support',\n    path: '/support',\n    icon: <IoIcons.IoMdHelpCircle />,\n    cName: 'nav-text',\n    subNav: [\n      {\n        title: 'Users',\n        path: '/overview/users',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Revenue',\n        path: '/overview/revenue',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  }*/\n];","/home/mayakuntla/Videos/cp/src/Components/Navbar/SubMenu.js",["290","291","292","293","294","295","296","297"],"import React, { useState,useContext} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport AppContext from '../App_context';\nimport { useHistory} from \"react-router-dom\";  \nconst SidebarLink = styled(Link)`\n  display: flex;\n  color: #e1e9fc;\n  justify-content: space-between;\n  align-items: center;\n  list-style: none;\n  text-decoration: none;\n  font-size: 16px;\n  margin-left: 0%;\n  margin-top: 0.5ch;\n  margin-bottom: 1ch;\n  margin-right: 1ch;\n  height:35px;\n  background-color: ${(props) => props.backgroundColor}\n  \n  :hover {\n    background: #252831;\n    border-left: 4px solid green;\n    cursor: pointer;\n  }\n   \n  \n \n`;\n  \nconst SidebarLabel = styled.span`\n\n`;\n  \nconst DropdownLink = styled(Link)`\n  background: #252831;\n  padding-left: 3rem;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: rgb(160, 161, 179);\n  font-size: 15px;\n  height:35px;\n  margin-top:0%;\n  \n  &:hover {\n    background: #252831;\n    cursor: pointer;\n    color:#fff;\n  }\n  \n`;\n\nconst DropdownLink1 = styled(Link)`\n  background: #252831;\n  padding-left: 5rem;\n  display: flex;\n  align-items: center;\n  text-decoration: none;\n  color: rgb(160, 161, 179);\n  font-size: 15px;\n  height:35px;\n  margin-top:0%;\n  \n  &:hover {\n    background: #252831;\n    cursor: pointer;\n    color:#fff;\n  }\n`;\n  \nconst SubMenu = ({item}) => {\n  const currentRoute = useHistory().location.pathname.toLowerCase();\n  console.log(currentRoute);\n    console.log(\"sdsdfds\");\n    console.log(\"Actived\",item.value);\n    const myContext = useContext(AppContext);\n\n  const [subnav, setSubnav] = useState(false);\n  const [subnav1,setsubnav1]=useState(false);\n  const [item0,setitem0]=useState(false);\n  const [item1,setitem1]=useState(false);\n  const showSubnav = (value) =>\n  {\n    if(value==0)\n    {\n      myContext.path='/scp_patterns_home';\n      setSubnav(!subnav);\n    }\n    else\n    {\n      myContext.path='/coverage_patterns_home';\n      setsubnav1(!subnav1);\n    }\n  }\n  const [appstate,changestate]=useState({\n    activeobject:null,\n    objects:[{id:0},{id:1}]\n  })\n  const toggleactiveindex=(index)=>{\n    if(index==1){\n      setitem1(false);\n      setitem0(true);\n    }\n    else{\n      setitem0(false);\n      setitem1(true);\n    }\n  }\n  \n  \n  return (\n    <>\n    \n      <SidebarLink   to={item.path} \n      \n          onClick={()=>{showSubnav(0)}}>\n        <div>\n         \n          <SidebarLabel>{item.title}</SidebarLabel>\n        </div>\n        <div>\n          {\n            item.subNav && subnav\n            ? item.iconOpened\n            : item.subNav\n            ? item.iconClosed\n            : null\n          }\n        </div>\n      </SidebarLink>\n      {subnav &&\n        item.subNav.map((item1, index1) => {\n          \n            if(index1==0)\n            {\n              return(\n                  <>\n                  <DropdownLink to={item1.path} key={index1} \n                  onClick={()=>{setsubnav1(!subnav1)}}>\n                    <div>\n                      {item1.icon}\n                      <SidebarLabel>{item1.title}</SidebarLabel>\n                    </div>\n                    <div>\n                      {\n                        item1.subNav && subnav1\n                        ? item1.iconOpened\n                        : item1.subNav\n                        ? item1.iconClosed\n                        : null\n                      }\n                    </div>\n                  </DropdownLink>\n                  {subnav1 && \n                    item1.subNav.map((item2,index2)=>{\n                      return(\n                        <DropdownLink1 to={item2.path} key={index2}>\n                          {item2.icon}\n                          <SidebarLabel>{item2.title}</SidebarLabel>\n                        </DropdownLink1>\n                      )\n                    })}\n                </>\n                  \n              );\n            }\n            else{\n              return(\n                <DropdownLink to={item1.path} key={index1}>\n                    {item1.icon}\n                    <SidebarLabel>{item1.title}</SidebarLabel>\n                </DropdownLink>\n              )\n            }\n        /*}*/\n        })\n      }\n     \n      \n\n    </>\n  );\n};\n  \nexport default SubMenu;","/home/mayakuntla/Videos/cp/src/Components/Navbar/Cp_Data.js",["298"],"import React from 'react';\nimport * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const CpData = [\n  {\n    title: 'hi',\n    icon: <AiIcons.AiFillHome />,\n    cName: 'nav-text',\n    value:1,\n    \n  },\n  {\n    title: 'hello',\n    icon: <FaIcons.FaDatabase />,\n    cName: 'nav-text',\n    value:2,\n    \n    \n  },\n  \n  \n /* {\n    title: 'Team',\n    path: '/team',\n    icon: <IoIcons.IoMdPeople />,\n    cName: 'nav-text',\n    subNav: [\n      {\n        title: 'Users',\n        path: '/overview/users',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Revenue',\n        path: '/overview/revenue',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  },\n  {\n    title: 'Messages',\n    path: '/messages',\n    icon: <FaIcons.FaEnvelopeOpenText />,\n    cName: 'nav-text',\n    subNav: [\n      {\n        title: 'Users',\n        path: '/overview/users',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Revenue',\n        path: '/overview/revenue',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  },\n  {\n    title: 'Support',\n    path: '/support',\n    icon: <IoIcons.IoMdHelpCircle />,\n    cName: 'nav-text',\n    subNav: [\n      {\n        title: 'Users',\n        path: '/overview/users',\n        icon: <IoIcons.IoIosPaper />\n      },\n      {\n        title: 'Revenue',\n        path: '/overview/revenue',\n        icon: <IoIcons.IoIosPaper />\n      }\n    ]\n  }*/\n];","/home/mayakuntla/Videos/cp/src/Components/Navbar/Mainsidebardata.js",[],"/home/mayakuntla/Videos/cp/src/Components/Defs/mincs.js",[],{"ruleId":"299","replacedBy":"300"},{"ruleId":"301","replacedBy":"302"},{"ruleId":"303","severity":1,"message":"304","line":13,"column":8,"nodeType":"305","messageId":"306","endLine":13,"endColumn":18},{"ruleId":"303","severity":1,"message":"307","line":1,"column":17,"nodeType":"305","messageId":"306","endLine":1,"endColumn":25},{"ruleId":"303","severity":1,"message":"308","line":3,"column":8,"nodeType":"305","messageId":"306","endLine":3,"endColumn":13},{"ruleId":"309","severity":1,"message":"310","line":30,"column":13,"nodeType":"311","endLine":30,"endColumn":54},{"ruleId":"303","severity":1,"message":"312","line":9,"column":8,"nodeType":"305","messageId":"306","endLine":9,"endColumn":15},{"ruleId":"303","severity":1,"message":"313","line":14,"column":9,"nodeType":"305","messageId":"306","endLine":14,"endColumn":18},{"ruleId":"303","severity":1,"message":"314","line":15,"column":10,"nodeType":"305","messageId":"306","endLine":15,"endColumn":21},{"ruleId":"303","severity":1,"message":"315","line":18,"column":9,"nodeType":"305","messageId":"306","endLine":18,"endColumn":19},{"ruleId":"303","severity":1,"message":"316","line":22,"column":9,"nodeType":"305","messageId":"306","endLine":22,"endColumn":18},{"ruleId":"309","severity":1,"message":"310","line":31,"column":13,"nodeType":"311","endLine":31,"endColumn":48},{"ruleId":"309","severity":1,"message":"310","line":35,"column":13,"nodeType":"311","endLine":35,"endColumn":54},{"ruleId":"303","severity":1,"message":"317","line":5,"column":10,"nodeType":"305","messageId":"306","endLine":5,"endColumn":14},{"ruleId":"303","severity":1,"message":"318","line":9,"column":10,"nodeType":"305","messageId":"306","endLine":9,"endColumn":18},{"ruleId":"303","severity":1,"message":"319","line":11,"column":10,"nodeType":"305","messageId":"306","endLine":11,"endColumn":19},{"ruleId":"303","severity":1,"message":"320","line":11,"column":21,"nodeType":"305","messageId":"306","endLine":11,"endColumn":27},{"ruleId":"321","severity":1,"message":"322","line":29,"column":26,"nodeType":"323","messageId":"324","endLine":29,"endColumn":28},{"ruleId":"321","severity":1,"message":"322","line":73,"column":44,"nodeType":"323","messageId":"324","endLine":73,"endColumn":46},{"ruleId":"309","severity":1,"message":"310","line":100,"column":33,"nodeType":"311","endLine":100,"endColumn":83},{"ruleId":"309","severity":1,"message":"310","line":105,"column":29,"nodeType":"311","endLine":105,"endColumn":72},{"ruleId":"321","severity":1,"message":"322","line":120,"column":44,"nodeType":"323","messageId":"324","endLine":120,"endColumn":46},{"ruleId":"309","severity":1,"message":"310","line":142,"column":33,"nodeType":"311","endLine":142,"endColumn":83},{"ruleId":"309","severity":1,"message":"310","line":149,"column":29,"nodeType":"311","endLine":149,"endColumn":72},{"ruleId":"309","severity":1,"message":"310","line":196,"column":33,"nodeType":"311","endLine":196,"endColumn":83},{"ruleId":"309","severity":1,"message":"310","line":203,"column":29,"nodeType":"311","endLine":203,"endColumn":72},{"ruleId":"309","severity":1,"message":"310","line":224,"column":21,"nodeType":"311","endLine":224,"endColumn":64},{"ruleId":"309","severity":1,"message":"310","line":267,"column":25,"nodeType":"311","endLine":267,"endColumn":70},{"ruleId":"303","severity":1,"message":"325","line":7,"column":8,"nodeType":"305","messageId":"306","endLine":7,"endColumn":16},{"ruleId":"303","severity":1,"message":"312","line":14,"column":8,"nodeType":"305","messageId":"306","endLine":14,"endColumn":15},{"ruleId":"303","severity":1,"message":"326","line":18,"column":7,"nodeType":"305","messageId":"306","endLine":18,"endColumn":18},{"ruleId":"303","severity":1,"message":"327","line":60,"column":7,"nodeType":"305","messageId":"306","endLine":60,"endColumn":19},{"ruleId":"303","severity":1,"message":"314","line":66,"column":10,"nodeType":"305","messageId":"306","endLine":66,"endColumn":21},{"ruleId":"303","severity":1,"message":"328","line":70,"column":9,"nodeType":"305","messageId":"306","endLine":70,"endColumn":20},{"ruleId":"303","severity":1,"message":"315","line":77,"column":9,"nodeType":"305","messageId":"306","endLine":77,"endColumn":19},{"ruleId":"303","severity":1,"message":"316","line":82,"column":9,"nodeType":"305","messageId":"306","endLine":82,"endColumn":18},{"ruleId":"321","severity":1,"message":"322","line":89,"column":13,"nodeType":"323","messageId":"324","endLine":89,"endColumn":15},{"ruleId":"321","severity":1,"message":"322","line":89,"column":25,"nodeType":"323","messageId":"324","endLine":89,"endColumn":27},{"ruleId":"321","severity":1,"message":"322","line":94,"column":18,"nodeType":"323","messageId":"324","endLine":94,"endColumn":20},{"ruleId":"321","severity":1,"message":"322","line":94,"column":30,"nodeType":"323","messageId":"324","endLine":94,"endColumn":32},{"ruleId":"303","severity":1,"message":"329","line":100,"column":9,"nodeType":"305","messageId":"306","endLine":100,"endColumn":24},{"ruleId":"309","severity":1,"message":"310","line":110,"column":13,"nodeType":"311","endLine":110,"endColumn":48},{"ruleId":"309","severity":1,"message":"310","line":115,"column":13,"nodeType":"311","endLine":115,"endColumn":54},{"ruleId":"321","severity":1,"message":"322","line":121,"column":29,"nodeType":"323","messageId":"324","endLine":121,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":121,"column":53,"nodeType":"323","messageId":"324","endLine":121,"endColumn":55},{"ruleId":"321","severity":1,"message":"330","line":129,"column":29,"nodeType":"323","messageId":"324","endLine":129,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":129,"column":53,"nodeType":"323","messageId":"324","endLine":129,"endColumn":55},{"ruleId":"321","severity":1,"message":"322","line":137,"column":29,"nodeType":"323","messageId":"324","endLine":137,"endColumn":31},{"ruleId":"321","severity":1,"message":"330","line":137,"column":53,"nodeType":"323","messageId":"324","endLine":137,"endColumn":55},{"ruleId":"321","severity":1,"message":"322","line":150,"column":30,"nodeType":"323","messageId":"324","endLine":150,"endColumn":32},{"ruleId":"321","severity":1,"message":"322","line":150,"column":54,"nodeType":"323","messageId":"324","endLine":150,"endColumn":56},{"ruleId":"321","severity":1,"message":"330","line":161,"column":29,"nodeType":"323","messageId":"324","endLine":161,"endColumn":31},{"ruleId":"321","severity":1,"message":"322","line":161,"column":53,"nodeType":"323","messageId":"324","endLine":161,"endColumn":55},{"ruleId":"321","severity":1,"message":"322","line":175,"column":29,"nodeType":"323","messageId":"324","endLine":175,"endColumn":31},{"ruleId":"321","severity":1,"message":"330","line":175,"column":53,"nodeType":"323","messageId":"324","endLine":175,"endColumn":55},{"ruleId":"321","severity":1,"message":"322","line":198,"column":28,"nodeType":"323","messageId":"324","endLine":198,"endColumn":30},{"ruleId":"321","severity":1,"message":"322","line":198,"column":52,"nodeType":"323","messageId":"324","endLine":198,"endColumn":54},{"ruleId":"321","severity":1,"message":"330","line":206,"column":27,"nodeType":"323","messageId":"324","endLine":206,"endColumn":29},{"ruleId":"321","severity":1,"message":"322","line":206,"column":51,"nodeType":"323","messageId":"324","endLine":206,"endColumn":53},{"ruleId":"321","severity":1,"message":"330","line":210,"column":25,"nodeType":"323","messageId":"324","endLine":210,"endColumn":27},{"ruleId":"321","severity":1,"message":"322","line":230,"column":27,"nodeType":"323","messageId":"324","endLine":230,"endColumn":29},{"ruleId":"321","severity":1,"message":"330","line":230,"column":51,"nodeType":"323","messageId":"324","endLine":230,"endColumn":53},{"ruleId":"303","severity":1,"message":"307","line":1,"column":16,"nodeType":"305","messageId":"306","endLine":1,"endColumn":24},{"ruleId":"303","severity":1,"message":"331","line":1,"column":25,"nodeType":"305","messageId":"306","endLine":1,"endColumn":35},{"ruleId":"303","severity":1,"message":"332","line":3,"column":8,"nodeType":"305","messageId":"306","endLine":3,"endColumn":18},{"ruleId":"303","severity":1,"message":"333","line":4,"column":10,"nodeType":"305","messageId":"306","endLine":4,"endColumn":19},{"ruleId":"303","severity":1,"message":"308","line":5,"column":8,"nodeType":"305","messageId":"306","endLine":5,"endColumn":13},{"ruleId":"303","severity":1,"message":"334","line":6,"column":13,"nodeType":"305","messageId":"306","endLine":6,"endColumn":20},{"ruleId":"303","severity":1,"message":"335","line":7,"column":10,"nodeType":"305","messageId":"306","endLine":7,"endColumn":21},{"ruleId":"303","severity":1,"message":"336","line":8,"column":8,"nodeType":"305","messageId":"306","endLine":8,"endColumn":14},{"ruleId":"303","severity":1,"message":"337","line":9,"column":8,"nodeType":"305","messageId":"306","endLine":9,"endColumn":14},{"ruleId":"303","severity":1,"message":"338","line":5,"column":8,"nodeType":"305","messageId":"306","endLine":5,"endColumn":14},{"ruleId":"303","severity":1,"message":"339","line":6,"column":8,"nodeType":"305","messageId":"306","endLine":6,"endColumn":20},{"ruleId":"303","severity":1,"message":"340","line":16,"column":10,"nodeType":"305","messageId":"306","endLine":16,"endColumn":15},{"ruleId":"303","severity":1,"message":"341","line":22,"column":10,"nodeType":"305","messageId":"306","endLine":22,"endColumn":22},{"ruleId":"303","severity":1,"message":"342","line":22,"column":23,"nodeType":"305","messageId":"306","endLine":22,"endColumn":39},{"ruleId":"321","severity":1,"message":"322","line":219,"column":19,"nodeType":"323","messageId":"324","endLine":219,"endColumn":21},{"ruleId":"309","severity":1,"message":"310","line":243,"column":9,"nodeType":"311","endLine":243,"endColumn":59},{"ruleId":"321","severity":1,"message":"322","line":249,"column":19,"nodeType":"323","messageId":"324","endLine":249,"endColumn":21},{"ruleId":"321","severity":1,"message":"322","line":273,"column":19,"nodeType":"323","messageId":"324","endLine":273,"endColumn":21},{"ruleId":"309","severity":1,"message":"310","line":308,"column":9,"nodeType":"311","endLine":308,"endColumn":59},{"ruleId":"309","severity":1,"message":"310","line":313,"column":21,"nodeType":"311","endLine":313,"endColumn":64},{"ruleId":"321","severity":1,"message":"322","line":321,"column":19,"nodeType":"323","messageId":"324","endLine":321,"endColumn":21},{"ruleId":"309","severity":1,"message":"310","line":363,"column":9,"nodeType":"311","endLine":363,"endColumn":59},{"ruleId":"309","severity":1,"message":"310","line":368,"column":21,"nodeType":"311","endLine":368,"endColumn":64},{"ruleId":"321","severity":1,"message":"322","line":384,"column":19,"nodeType":"323","messageId":"324","endLine":384,"endColumn":21},{"ruleId":"309","severity":1,"message":"310","line":430,"column":9,"nodeType":"311","endLine":430,"endColumn":59},{"ruleId":"309","severity":1,"message":"310","line":435,"column":21,"nodeType":"311","endLine":435,"endColumn":64},{"ruleId":"321","severity":1,"message":"322","line":450,"column":19,"nodeType":"323","messageId":"324","endLine":450,"endColumn":21},{"ruleId":"309","severity":1,"message":"310","line":496,"column":9,"nodeType":"311","endLine":496,"endColumn":59},{"ruleId":"309","severity":1,"message":"310","line":501,"column":21,"nodeType":"311","endLine":501,"endColumn":64},{"ruleId":"303","severity":1,"message":"307","line":1,"column":16,"nodeType":"305","messageId":"306","endLine":1,"endColumn":24},{"ruleId":"303","severity":1,"message":"343","line":11,"column":8,"nodeType":"305","messageId":"306","endLine":11,"endColumn":18},{"ruleId":"303","severity":1,"message":"344","line":13,"column":8,"nodeType":"305","messageId":"306","endLine":13,"endColumn":19},{"ruleId":"303","severity":1,"message":"345","line":14,"column":8,"nodeType":"305","messageId":"306","endLine":14,"endColumn":14},{"ruleId":"303","severity":1,"message":"346","line":15,"column":8,"nodeType":"305","messageId":"306","endLine":15,"endColumn":18},{"ruleId":"303","severity":1,"message":"347","line":16,"column":8,"nodeType":"305","messageId":"306","endLine":16,"endColumn":16},{"ruleId":"303","severity":1,"message":"348","line":32,"column":12,"nodeType":"305","messageId":"306","endLine":32,"endColumn":20},{"ruleId":"303","severity":1,"message":"349","line":33,"column":12,"nodeType":"305","messageId":"306","endLine":33,"endColumn":24},{"ruleId":"303","severity":1,"message":"350","line":34,"column":12,"nodeType":"305","messageId":"306","endLine":34,"endColumn":17},{"ruleId":"303","severity":1,"message":"351","line":36,"column":12,"nodeType":"305","messageId":"306","endLine":36,"endColumn":23},{"ruleId":"303","severity":1,"message":"352","line":36,"column":24,"nodeType":"305","messageId":"306","endLine":36,"endColumn":37},{"ruleId":"303","severity":1,"message":"353","line":60,"column":11,"nodeType":"305","messageId":"306","endLine":60,"endColumn":19},{"ruleId":"321","severity":1,"message":"322","line":70,"column":15,"nodeType":"323","messageId":"324","endLine":70,"endColumn":17},{"ruleId":"321","severity":1,"message":"322","line":91,"column":26,"nodeType":"323","messageId":"324","endLine":91,"endColumn":28},{"ruleId":"321","severity":1,"message":"322","line":91,"column":48,"nodeType":"323","messageId":"324","endLine":91,"endColumn":50},{"ruleId":"321","severity":1,"message":"322","line":91,"column":70,"nodeType":"323","messageId":"324","endLine":91,"endColumn":72},{"ruleId":"321","severity":1,"message":"322","line":93,"column":30,"nodeType":"323","messageId":"324","endLine":93,"endColumn":32},{"ruleId":"321","severity":1,"message":"322","line":96,"column":30,"nodeType":"323","messageId":"324","endLine":96,"endColumn":32},{"ruleId":"321","severity":1,"message":"322","line":99,"column":30,"nodeType":"323","messageId":"324","endLine":99,"endColumn":32},{"ruleId":"321","severity":1,"message":"322","line":109,"column":37,"nodeType":"323","messageId":"324","endLine":109,"endColumn":39},{"ruleId":"354","severity":1,"message":"355","line":134,"column":25,"nodeType":"305","messageId":"356","endLine":134,"endColumn":26},{"ruleId":"354","severity":1,"message":"357","line":135,"column":29,"nodeType":"305","messageId":"356","endLine":135,"endColumn":30},{"ruleId":"354","severity":1,"message":"355","line":169,"column":25,"nodeType":"305","messageId":"356","endLine":169,"endColumn":26},{"ruleId":"354","severity":1,"message":"357","line":170,"column":29,"nodeType":"305","messageId":"356","endLine":170,"endColumn":30},{"ruleId":"354","severity":1,"message":"355","line":174,"column":25,"nodeType":"305","messageId":"356","endLine":174,"endColumn":26},{"ruleId":"354","severity":1,"message":"357","line":176,"column":29,"nodeType":"305","messageId":"356","endLine":176,"endColumn":30},{"ruleId":"354","severity":1,"message":"357","line":183,"column":29,"nodeType":"305","messageId":"356","endLine":183,"endColumn":30},{"ruleId":"358","severity":1,"message":"359","line":201,"column":45,"nodeType":"360","messageId":"361","endLine":201,"endColumn":59,"fix":"362"},{"ruleId":"358","severity":1,"message":"363","line":204,"column":45,"nodeType":"360","messageId":"361","endLine":204,"endColumn":70,"fix":"364"},{"ruleId":"358","severity":1,"message":"365","line":207,"column":45,"nodeType":"360","messageId":"361","endLine":207,"endColumn":55,"fix":"366"},{"ruleId":"358","severity":1,"message":"367","line":210,"column":45,"nodeType":"360","messageId":"361","endLine":210,"endColumn":57,"fix":"368"},{"ruleId":"358","severity":1,"message":"369","line":213,"column":45,"nodeType":"360","messageId":"361","endLine":213,"endColumn":68,"fix":"370"},{"ruleId":"321","severity":1,"message":"322","line":232,"column":15,"nodeType":"323","messageId":"324","endLine":232,"endColumn":17},{"ruleId":"303","severity":1,"message":"371","line":256,"column":13,"nodeType":"305","messageId":"306","endLine":256,"endColumn":14},{"ruleId":"321","severity":1,"message":"322","line":273,"column":15,"nodeType":"323","messageId":"324","endLine":273,"endColumn":17},{"ruleId":"358","severity":1,"message":"359","line":275,"column":38,"nodeType":"360","messageId":"361","endLine":275,"endColumn":52,"fix":"372"},{"ruleId":"303","severity":1,"message":"373","line":283,"column":11,"nodeType":"305","messageId":"306","endLine":283,"endColumn":21},{"ruleId":"303","severity":1,"message":"374","line":300,"column":7,"nodeType":"305","messageId":"306","endLine":300,"endColumn":22},{"ruleId":"303","severity":1,"message":"375","line":309,"column":7,"nodeType":"305","messageId":"306","endLine":309,"endColumn":23},{"ruleId":"354","severity":1,"message":"376","line":328,"column":13,"nodeType":"305","messageId":"356","endLine":328,"endColumn":16},{"ruleId":"354","severity":1,"message":"377","line":329,"column":13,"nodeType":"305","messageId":"356","endLine":329,"endColumn":16},{"ruleId":"354","severity":1,"message":"357","line":330,"column":17,"nodeType":"305","messageId":"356","endLine":330,"endColumn":18},{"ruleId":"321","severity":1,"message":"322","line":333,"column":43,"nodeType":"323","messageId":"324","endLine":333,"endColumn":45},{"ruleId":"321","severity":1,"message":"322","line":345,"column":20,"nodeType":"323","messageId":"324","endLine":345,"endColumn":22},{"ruleId":"354","severity":1,"message":"378","line":364,"column":13,"nodeType":"305","messageId":"356","endLine":364,"endColumn":14},{"ruleId":"354","severity":1,"message":"357","line":365,"column":17,"nodeType":"305","messageId":"356","endLine":365,"endColumn":18},{"ruleId":"354","severity":1,"message":"379","line":367,"column":21,"nodeType":"305","messageId":"356","endLine":367,"endColumn":22},{"ruleId":"321","severity":1,"message":"322","line":389,"column":20,"nodeType":"323","messageId":"324","endLine":389,"endColumn":22},{"ruleId":"321","severity":1,"message":"322","line":392,"column":17,"nodeType":"323","messageId":"324","endLine":392,"endColumn":19},{"ruleId":"380","severity":1,"message":"381","line":663,"column":59,"nodeType":"382","messageId":"383","endLine":663,"endColumn":61},{"ruleId":"321","severity":1,"message":"322","line":665,"column":64,"nodeType":"323","messageId":"324","endLine":665,"endColumn":66},{"ruleId":"321","severity":1,"message":"322","line":665,"column":96,"nodeType":"323","messageId":"324","endLine":665,"endColumn":98},{"ruleId":"321","severity":1,"message":"322","line":665,"column":125,"nodeType":"323","messageId":"324","endLine":665,"endColumn":127},{"ruleId":"380","severity":1,"message":"381","line":675,"column":81,"nodeType":"382","messageId":"383","endLine":675,"endColumn":83},{"ruleId":"321","severity":1,"message":"322","line":676,"column":73,"nodeType":"323","messageId":"324","endLine":676,"endColumn":75},{"ruleId":"309","severity":1,"message":"310","line":681,"column":69,"nodeType":"311","endLine":681,"endColumn":142},{"ruleId":"309","severity":1,"message":"310","line":696,"column":57,"nodeType":"311","endLine":696,"endColumn":144},{"ruleId":"321","severity":1,"message":"322","line":708,"column":69,"nodeType":"323","messageId":"324","endLine":708,"endColumn":71},{"ruleId":"321","severity":1,"message":"322","line":708,"column":101,"nodeType":"323","messageId":"324","endLine":708,"endColumn":103},{"ruleId":"321","severity":1,"message":"330","line":708,"column":130,"nodeType":"323","messageId":"324","endLine":708,"endColumn":132},{"ruleId":"380","severity":1,"message":"381","line":716,"column":81,"nodeType":"382","messageId":"383","endLine":716,"endColumn":83},{"ruleId":"321","severity":1,"message":"322","line":717,"column":73,"nodeType":"323","messageId":"324","endLine":717,"endColumn":75},{"ruleId":"321","severity":1,"message":"322","line":717,"column":94,"nodeType":"323","messageId":"324","endLine":717,"endColumn":96},{"ruleId":"309","severity":1,"message":"310","line":720,"column":65,"nodeType":"311","endLine":720,"endColumn":138},{"ruleId":"309","severity":1,"message":"310","line":731,"column":57,"nodeType":"311","endLine":731,"endColumn":144},{"ruleId":"321","severity":1,"message":"330","line":743,"column":69,"nodeType":"323","messageId":"324","endLine":743,"endColumn":71},{"ruleId":"321","severity":1,"message":"322","line":743,"column":101,"nodeType":"323","messageId":"324","endLine":743,"endColumn":103},{"ruleId":"321","severity":1,"message":"322","line":743,"column":130,"nodeType":"323","messageId":"324","endLine":743,"endColumn":132},{"ruleId":"321","severity":1,"message":"322","line":743,"column":141,"nodeType":"323","messageId":"324","endLine":743,"endColumn":143},{"ruleId":"321","severity":1,"message":"322","line":747,"column":69,"nodeType":"323","messageId":"324","endLine":747,"endColumn":71},{"ruleId":"380","severity":1,"message":"381","line":752,"column":81,"nodeType":"382","messageId":"383","endLine":752,"endColumn":83},{"ruleId":"321","severity":1,"message":"322","line":753,"column":73,"nodeType":"323","messageId":"324","endLine":753,"endColumn":75},{"ruleId":"309","severity":1,"message":"310","line":759,"column":61,"nodeType":"311","endLine":759,"endColumn":134},{"ruleId":"309","severity":1,"message":"310","line":769,"column":57,"nodeType":"311","endLine":769,"endColumn":144},{"ruleId":"321","severity":1,"message":"330","line":780,"column":69,"nodeType":"323","messageId":"324","endLine":780,"endColumn":71},{"ruleId":"321","severity":1,"message":"322","line":780,"column":101,"nodeType":"323","messageId":"324","endLine":780,"endColumn":103},{"ruleId":"321","severity":1,"message":"330","line":780,"column":130,"nodeType":"323","messageId":"324","endLine":780,"endColumn":132},{"ruleId":"321","severity":1,"message":"322","line":780,"column":141,"nodeType":"323","messageId":"324","endLine":780,"endColumn":143},{"ruleId":"321","severity":1,"message":"322","line":788,"column":69,"nodeType":"323","messageId":"324","endLine":788,"endColumn":71},{"ruleId":"380","severity":1,"message":"381","line":793,"column":81,"nodeType":"382","messageId":"383","endLine":793,"endColumn":83},{"ruleId":"321","severity":1,"message":"322","line":794,"column":73,"nodeType":"323","messageId":"324","endLine":794,"endColumn":75},{"ruleId":"321","severity":1,"message":"322","line":794,"column":116,"nodeType":"323","messageId":"324","endLine":794,"endColumn":118},{"ruleId":"321","severity":1,"message":"322","line":794,"column":137,"nodeType":"323","messageId":"324","endLine":794,"endColumn":139},{"ruleId":"309","severity":1,"message":"310","line":797,"column":65,"nodeType":"311","endLine":797,"endColumn":137},{"ruleId":"309","severity":1,"message":"310","line":808,"column":57,"nodeType":"311","endLine":808,"endColumn":144},{"ruleId":"321","severity":1,"message":"322","line":841,"column":54,"nodeType":"323","messageId":"324","endLine":841,"endColumn":56},{"ruleId":"321","severity":1,"message":"322","line":868,"column":74,"nodeType":"323","messageId":"324","endLine":868,"endColumn":76},{"ruleId":"380","severity":1,"message":"381","line":873,"column":76,"nodeType":"382","messageId":"383","endLine":873,"endColumn":78},{"ruleId":"321","severity":1,"message":"322","line":912,"column":71,"nodeType":"323","messageId":"324","endLine":912,"endColumn":73},{"ruleId":"309","severity":1,"message":"310","line":912,"column":252,"nodeType":"311","endLine":912,"endColumn":324},{"ruleId":"380","severity":1,"message":"381","line":947,"column":80,"nodeType":"382","messageId":"383","endLine":947,"endColumn":82},{"ruleId":"321","severity":1,"message":"322","line":949,"column":74,"nodeType":"323","messageId":"324","endLine":949,"endColumn":76},{"ruleId":"321","severity":1,"message":"322","line":950,"column":65,"nodeType":"323","messageId":"324","endLine":950,"endColumn":67},{"ruleId":"309","severity":1,"message":"310","line":967,"column":57,"nodeType":"311","endLine":967,"endColumn":129},{"ruleId":"303","severity":1,"message":"384","line":2,"column":9,"nodeType":"305","messageId":"306","endLine":2,"endColumn":14},{"ruleId":"303","severity":1,"message":"385","line":6,"column":11,"nodeType":"305","messageId":"306","endLine":6,"endColumn":28},{"ruleId":"386","severity":1,"message":"387","line":19,"column":17,"nodeType":"311","messageId":"388","endLine":19,"endColumn":117,"fix":"389"},{"ruleId":"303","severity":1,"message":"384","line":3,"column":8,"nodeType":"305","messageId":"306","endLine":3,"endColumn":13},{"ruleId":"303","severity":1,"message":"390","line":3,"column":13,"nodeType":"305","messageId":"306","endLine":3,"endColumn":20},{"ruleId":"303","severity":1,"message":"391","line":81,"column":10,"nodeType":"305","messageId":"306","endLine":81,"endColumn":15},{"ruleId":"303","severity":1,"message":"392","line":82,"column":10,"nodeType":"305","messageId":"306","endLine":82,"endColumn":15},{"ruleId":"321","severity":1,"message":"322","line":85,"column":13,"nodeType":"323","messageId":"324","endLine":85,"endColumn":15},{"ruleId":"303","severity":1,"message":"393","line":96,"column":10,"nodeType":"305","messageId":"306","endLine":96,"endColumn":18},{"ruleId":"303","severity":1,"message":"394","line":96,"column":19,"nodeType":"305","messageId":"306","endLine":96,"endColumn":30},{"ruleId":"303","severity":1,"message":"395","line":100,"column":9,"nodeType":"305","messageId":"306","endLine":100,"endColumn":26},{"ruleId":"321","severity":1,"message":"322","line":101,"column":13,"nodeType":"323","messageId":"324","endLine":101,"endColumn":15},{"ruleId":"321","severity":1,"message":"322","line":135,"column":22,"nodeType":"323","messageId":"324","endLine":135,"endColumn":24},{"ruleId":"303","severity":1,"message":"396","line":4,"column":13,"nodeType":"305","messageId":"306","endLine":4,"endColumn":20},"no-native-reassign",["397"],"no-negated-in-lhs",["398"],"no-unused-vars","'Mainnavbar' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'axios' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'history' is defined but never used.","'myContext' is assigned a value but never used.","'expand_icon' is assigned a value but never used.","'expandthis' is assigned a value but never used.","'closethis' is assigned a value but never used.","'Link' is defined but never used.","'FaItalic' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Scp_home' is defined but never used.","'SidebarLink' is assigned a value but never used.","'SidebarLabel' is assigned a value but never used.","'showSidebar' is assigned a value but never used.","'go_to_main_page' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'useContext' is defined but never used.","'AppContext' is defined but never used.","'Container' is defined but never used.","'FaIcons' is defined but never used.","'IconContext' is defined but never used.","'Loader' is defined but never used.","'Button' is defined but never used.","'Image1' is defined but never used.","'ReactTooltip' is defined but never used.","'array' is defined but never used.","'show_content' is assigned a value but never used.","'set_show_content' is assigned a value but never used.","'JSZipUtils' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'InputLabel' is defined but never used.","'MenuItem' is defined but never used.","'vertices' is assigned a value but never used.","'vertices_set' is assigned a value but never used.","'edges' is assigned a value but never used.","'display_all' is assigned a value but never used.","'setdisplayall' is assigned a value but never used.","'variable' is assigned a value but never used.","no-redeclare","'c' is already defined.","redeclared","'i' is already defined.","no-useless-computed-key","Unnecessarily computed property [\"coverage\"] found.","Property","unnecessarilyComputedProperty",{"range":"399","text":"400"},"Unnecessarily computed property [\"csfrom\"] found.",{"range":"401","text":"402"},"Unnecessarily computed property [\"csto\"] found.",{"range":"403","text":"404"},"Unnecessarily computed property [\"orfrom\"] found.",{"range":"405","text":"406"},"Unnecessarily computed property [\"orto\"] found.",{"range":"407","text":"408"},"'r' is assigned a value but never used.",{"range":"409","text":"400"},"'show_modal' is assigned a value but never used.","'handleclickleft' is assigned a value but never used.","'handleclickright' is assigned a value but never used.","'zip' is already defined.","'img' is already defined.","'p' is already defined.","'j' is already defined.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Image' is defined but never used.","'handlebuttonclick' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","noTargetBlank",{"range":"410","text":"411"},"'AiIcons' is defined but never used.","'item0' is assigned a value but never used.","'item1' is assigned a value but never used.","'appstate' is assigned a value but never used.","'changestate' is assigned a value but never used.","'toggleactiveindex' is assigned a value but never used.","'IoIcons' is defined but never used.","no-global-assign","no-unsafe-negation",[8465,8477],"\"coverage\"",[8610,8620],"\"csfrom\"",[8767,8775],"\"csto\"",[8909,8919],"\"orfrom\"",[9053,9061],"\"orto\"",[10636,10648],[807,807]," rel=\"noreferrer\""]